<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 323859 Maintainer: dallas Status: ready -->
<!-- CREDITS: Altair --> 
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>常量</title>

  <simpara>
   常量是一个简单值的标识符（名字）。如同其名称所暗示的，在脚本执行期间该值不能改变（除了所谓的<link
   linkend="language.constants.predefined">魔术常量</link>，它们其实不是常量）。常量默认为大小写敏感。传统上常量标识符总是大写的。
  </simpara>
  <para>
   常量名和其它任何 PHP 标签遵循同样的命名规则。合法的常量名以字母或下划线开始，后面跟着任何字母，数字或下划线。用正则表达式是这样表达的：<literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>。
  </para>
  &tip.userlandnaming;  
  <para>
   <example>
    <title>合法与非法的常量名</title>
    <programlisting role="php">
<![CDATA[
<?php

// 合法的常量名
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// 非法的常量名
define("2FOO",    "something");

// 下面的定义是合法的，但应该避免这样做：(自定义常量不要以__开头)
// 也许将来有一天PHP会定义一个__FOO__的魔术常量
// 这样就会与你的代码相冲突
define("__FOO__", "something");

?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <simpara>
    在这里，字母指的是 a-z，A-Z，以及从 127 到 255（0x7f-0xff）的 ASCII 字符。
   </simpara>
  </note>

  <simpara>
   和 &link.superglobals; 一样，常量的范围是全局的。不用管作用区域就可以在脚本的任何地方访问常量。有关作用区域的更多信息请阅读手册中的<link
   linkend="language.variables.scope">变量范围</link>。
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>语法</title>
   <simpara>
    可以用 <function>define</function> 函数来定义常量，在
    PHP 5.3.0 以后，可以使用 <literal>const</literal> 
    关键字在类定义之外定义常量。一个常量一旦被定义，就不能再改变或者取消定义。
   </simpara>
   <simpara>
    常量只能包含标量数据（<type>boolean</type>，<type>integer</type>，<type>float</type>
    和 <type>string</type>）。可以定义 <type>resource</type> 常量，但应尽量避免，因为会造成不可预料的结果。
   </simpara>
   <simpara>
    可以简单的通过指定其名字来取得常量的值，与变量不同，<emphasis>不应该</emphasis>在常量前面加上
     <literal>$</literal> 符号。如果常量名是动态的，也可以用函数 
     <function>constant</function> 来获取常量的值。用 
     <function>get_defined_constants</function> 可以获得所有已定义的常量列表。
   </simpara>
   <note>
    <simpara>
     常量和（全局）变量在不同的名字空间中。这意味着例如 &true; 和 <varname>$TRUE</varname> 是不同的。
    </simpara>
   </note>
   <simpara>
    如果使用了一个未定义的常量，PHP
    假定想要的是该常量本身的名字，如同用字符串调用它一样（CONSTANT 对应
    "CONSTANT"）。此时将发出一个 <link linkend="ref.errorfunc">E_NOTICE</link>
    级的错误。参见手册中为什么
    <link linkend="language.types.array.foo-bar">$foo[bar]</link>
    是错误的（除非事先用 <function>define</function> 将 <literal>bar</literal>
    定义为一个常量）。如果只想检查是否定义了某常量，用 <function>defined</function> 函数。
   </simpara>
   <para>
    常量和变量有如下不同：
    <itemizedlist>
     <listitem>
      <simpara>
       常量前面没有美元符号（<literal>$</literal>）；
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       常量只能用 <function>define</function> 函数定义，而不能通过赋值语句；
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       常量可以不用理会变量的作用域而在任何地方定义和访问；
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       常量一旦定义就不能被重新定义或者取消定义；
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       常量的值只能是标量。
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>定义常量</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
echo Constant; // 输出 "Constant" 并发出一个提示级别错误信息
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>使用关键字 <literal>const</literal> 定义常量</title>
     <programlisting role="php">
<![CDATA[
<?php
// 以下代码在 PHP 5.3.0 后可以正常工作
const CONSTANT = 'Hello World';

echo CONSTANT;
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <note>
    <para>
     和使用 <function>define</function> 来定义常量相反的是，使用 <literal>const</literal>
     关键字定义常量必须处于最顶端的作用区域，因为用此方法是在编译时定义的。这就意味着不能在函数内，循环内以及
     <literal>if</literal> 语句之内用 <literal>const</literal> 来定义常量。
    </para>
   </note>

   <simpara>
    参见<link linkend="language.oop5.constants">类常量</link>。
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>魔术常量</title>

   <simpara>
    PHP 向它运行的任何脚本提供了大量的<link
    linkend="reserved.constants">预定义常量</link>。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。
   </simpara>
   <para>
    有八个魔术常量它们的值随着它们在代码中的位置改变而改变。例如
    <constant>__LINE__</constant> 的值就依赖于它在脚本中所处的行来决定。这些特殊的常量不区分大小写，如下：
   </para>
   <para>
    <table>
     <title>几个 PHP 的“魔术常量”</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>名称</entry>
        <entry>说明</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
         文件中的当前行号。
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
         文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自
         PHP 4.0.2 起，<constant>__FILE__</constant>
         总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>
         文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于
         <literal>dirname(__FILE__)</literal>。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）
=        </entry>
       </row>       
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         函数名称（PHP 4.3.0 新加）。自 PHP 5
         起本常量返回该函数被定义时的名字（区分大小写）。在
         PHP 4 中该值总是小写字母的。
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         类的名称（PHP 4.3.0 新加）。自 PHP 5
         起本常量返回该类被定义时的名字（区分大小写）。在
         PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如
         <literal>Foo\Bar</literal>）。注意自 PHP 5.4 起 __CLASS__
         对 trait 也起作用。当用在 trait 方法中时，__CLASS__
         是调用 trait 方法的类的名字。
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait
         被定义时的名字（区分大小写）。Trait 名包括其被声明的作用区域（例如
         <literal>Foo\Bar</literal>）。
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    参见
    <function>get_class</function>，<function>get_object_vars</function>，<function>file_exists</function>&listendand;<function>function_exists</function>。
   </para>

  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
