<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 328430 Maintainer: dallas Status: ready -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  <literal>foreach</literal> 语法结构提供了遍历数组的简单方式。<literal>foreach</literal>
  仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：
  <informalexample>
   <programlisting>
<![CDATA[
foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  第一种格式遍历给定的 <literal>array_expression</literal>
  数组。每次循环中，当前单元的值被赋给 <literal>$value</literal>
  并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。
 </simpara>
 <simpara>
  第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量
  <literal>$key</literal>。
 </simpara>
 <simpara>
  还能够自定义<link linkend="language.oop5.iterations">遍历对象</link>。
 </simpara>
 <para>
  <note>
   <para>
    当 <literal>foreach</literal>
    开始执行时，数组内部的指针会自动指向第一个单元。这意味着不需要在
    <literal>foreach</literal> 循环之前调用 <function>reset</function>。
   </para>
   <para>
    由于 <literal>foreach</literal> 依赖内部数组指针，在循环中修改其值将可能导致意外的行为。
   </para>
  </note>
 </para>
 <para>
  可以很容易地通过在 <literal>$value</literal> 之前加上
  &amp; 来修改数组的元素。此方法将以<link
  linkend="language.references">引用</link>赋值而不是拷贝一个值。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now array(2, 4, 6, 8)
unset($value); // 最后取消掉引用
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <literal>$value</literal> 的引用仅在被遍历的数组可以被引用时才可用（例如是个变量）。以下代码则无法运行：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}

?>
]]>
   </programlisting>   
  </informalexample>
 </para> 
 <warning>
  <para>
   数组最后一个元素的 <literal>$value</literal> 引用在
   <literal>foreach</literal> 循环之后仍会保留。建议使用
   <function>unset</function> 来将其销毁。
  </para>
 </warning>  
 <para>
  <note>
   <para>
    <literal>foreach</literal> 不支持用“@”来抑制错误信息的能力。
   </para>
  </note>
 </para>
 <para>
  用户可能注意到了以下的代码功能完全相同：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list(, $value) = each($arr)) {
    echo "Value: $value<br>\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  以下代码功能也完全相同：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list($key, $value) = each($arr)) {
    echo "Key: $key; Value: $value<br />\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  示范用法的更多例子：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach example 1: value only */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
   echo "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with its manual access notation printed for illustration) */

$a = array(1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 
 
 <sect2 xml:id="control-structures.foreach.list">
  <title>用 list() 给嵌套的数组解包</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   PHP 5.5 增添了遍历一个数组的数组的功能并且把嵌套的数组解包到循环变量中，只需将
   <function>list</function> 作为值提供。
  </para>

  <para>
   例如：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    // $a contains the first element of the nested array,
    // and $b contains the second element.
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   <function>list</function> 中的单元可以少于嵌套数组的，此时多出来的数组单元将被忽略：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a)) {
    // Note that there is no $b here.
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   如果 <function>list</function> 中列出的单元多于嵌套数组则会发出一条消息级别的错误信息：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C: 

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C: 
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
