<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337865 Maintainer: 虾米 Status: ready -->
<!-- EN-Revision: 336097 Maintainer: Huchengtian Status: ready -->
<!-- EN-Revision: 329570 Maintainer: dallas Status: partial -->
<chapter xml:id="language.generators" xmlns="http://docbook.org/ns/docbook">
 <title>生成器</title>

 <sect1 xml:id="language.generators.overview">
  <title>生成器总览</title>
  <?phpdoc print-version-for="generators"?>

  <para>
   生成器提供了一种更容易的方法来实现简单的<link
   linkend="language.oop5.iterations">对象迭代</link>，相比较定义类实现
   <classname>Iterator</classname> 接口的方式，性能开销和复杂性大大降低。
  </para>

  <para>
   生成器允许你在 &foreach;
   代码块中写代码来迭代一组数据而不需要在内存中创建一个数组, 那会使你的内存达到上限，或者会占据可观的处理时间。相反，你可以写一个生成器函数，就像一个普通的自定义<link
   linkend="functions.user-defined">函数</link>一样, 和普通函数只<link
   linkend="functions.returning-values">返回</link>一次不同的是, 生成器可以根据需要 &yield; 多次，以便生成需要迭代的值。
  </para>

  <para>
   一个简单的例子就是使用生成器来重新实现 <function>range</function>
   函数。 标准的 <function>range</function>
   函数需要在内存中生成一个数组包含每一个在它范围内的值，然后返回该数组, 结果就是会产生多个很大的数组。 比如，调用
   <command>range(0, 1000000)</command> 将导致内存占用超过 100 MB。
  </para>

  <para>
   做为一种替代方法, 我们可以实现一个 <literal>xrange()</literal>
   生成器, 只需要足够的内存来创建
   <classname>Iterator</classname> 对象并在内部跟踪生成器的当前状态，这样只需要不到1K字节的内存。
  </para>

  <example>
   <title>将 <function>range</function> 实现为生成器</title>
   <programlisting role="php">
<![CDATA[
<?php
function xrange($start, $limit, $step = 1) {
    if ($start < $limit) {
        if ($step <= 0) {
            throw new LogicException('Step must be +ve');
        }

        for ($i = $start; $i <= $limit; $i += $step) {
            yield $i;
        }
    } else {
        if ($step >= 0) {
            throw new LogicException('Step must be -ve');
        }

        for ($i = $start; $i >= $limit; $i += $step) {
            yield $i;
        }
    }
}

/* 
 * 注意下面range()和xrange()输出的结果是一样的。
 */

echo 'Single digit odd numbers from range():  ';
foreach (range(1, 9, 2) as $number) {
    echo "$number ";
}
echo "\n";

echo 'Single digit odd numbers from xrange(): ';
foreach (xrange(1, 9, 2) as $number) {
    echo "$number ";
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Single digit odd numbers from range():  1 3 5 7 9 
Single digit odd numbers from xrange(): 1 3 5 7 9 
]]>
   </screen>
  </example>

  <sect2 xml:id="language.generators.object">
   <title><classname>Generator</classname> objects</title>
   <para>
    When a generator function is called for the first time, an object of the
    internal <classname>Generator</classname> class is returned. This object
    implements the <classname>Iterator</classname> interface in much the same
    way as a forward-only iterator object would, and provides methods that can
    be called to manipulate the state of the generator, including sending
    values to and returning values from it.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="language.generators.syntax">
  <title>生成器语法</title>

  <para>
   一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成器可以&yield;生成许多它所需要的值。
  </para>

  <para>
   当一个生成器被调用的时候，它返回一个可以被遍历的对象.当你遍历这个对象的时候(例如通过一个&foreach;循环)，PHP  将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态，这样它就可以在需要产生下一个值的时候恢复调用状态。
  </para>

  <para>
   一旦不再需要产生更多的值，生成器函数可以简单退出，而调用生成器的代码还可以继续执行，就像一个数组已经被遍历完了。
  </para>

  <note>
   <para>
    一个生成器不可以返回值： 这样做会产生一个编译错误。然而<command>return</command>空是一个有效的语法并且它将会终止生成器继续执行。
   </para>
  </note>

  <sect2 xml:id="control-structures.yield">
   <title><command>yield</command>关键字</title>
 
   <para>
    生成器函数的核心是<command>yield</command>关键字。它最简单的调用形式看起来像一个return申明，不同之处在于普通return会返回值并终止函数的执行，而yield会返回一个值给循环调用此生成器的代码并且只是暂停执行生成器函数。
   </para>

   <example>
    <title>一个简单的生成值的例子</title>
    <programlisting role="php">
<![CDATA[
<?php
function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        //注意变量$i的值在不同的yield之间是保持传递的。
        yield $i;
    }
}

$generator = gen_one_to_three();
foreach ($generator as $value) {
    echo "$value\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
2
3
]]>
    </screen>
   </example>

   <note>
    <para>
     在内部会为生成的值配对连续的整型索引，就像一个非关联的数组。
    </para>
   </note>

   <caution>
    <para>
     如果在一个表达式上下文(例如在一个赋值表达式的右侧)中使用yield，你必须使用圆括号把yield申明包围起来。 例如这样是有效的：
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
      $data = (yield $value);
]]>
     </programlisting>
    </informalexample>

    <para>
     而这样就不合法，并且在PHP5中会产生一个编译错误：
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
      $data = yield $value;
]]>
     </programlisting>
    </informalexample>

    <para>
     The parenthetical restrictions do not apply in PHP 7.
    </para>

    <para>
     这个语法可以和生成器对象的<methodname>Generator::send</methodname>方法配合使用。
    </para>
   </caution>
   
   <sect3 xml:id="control-structures.yield.associative">
    <title>指定键名来生成值</title>
    
    <para>
     PHP的数组支持关联键值对数组，生成器也一样支持。所以除了生成简单的值，你也可以在生成值的时候指定键名。
    </para>
    
    <para>
     如下所示，生成一个键值对与定义一个关联数组十分相似。
    </para>
    
    <example>
     <title>生成一个键值对</title>
     <programlisting role="php">
<![CDATA[
<?php
/* 
 * 下面每一行是用分号分割的字段组合，第一个字段将被用作键名。
 */

$input = <<<'EOF'
1;PHP;Likes dollar signs
2;Python;Likes whitespace
3;Ruby;Likes blocks
EOF;

function input_parser($input) {
    foreach (explode("\n", $input) as $line) {
        $fields = explode(';', $line);
        $id = array_shift($fields);

        yield $id => $fields;
    }
}

foreach (input_parser($input) as $id => $fields) {
    echo "$id:\n";
    echo "    $fields[0]\n";
    echo "    $fields[1]\n";
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
1:
    PHP
    Likes dollar signs
2:
    Python
    Likes whitespace
3:
    Ruby
    Likes blocks
]]>
     </screen>
    </example>

    <caution>
     <para>
      和之前生成简单值类型一样，在一个表达式上下文中生成键值对也需要使用圆括号进行包围：
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
      $data = (yield $key => $value);
]]>
      </programlisting>
     </informalexample>
    </caution>
   </sect3>
   
   <sect3 xml:id="control-structures.yield.null">
    <title>生成null值</title>
    
    <para>
     Yield可以在没有参数传入的情况下被调用来生成一个 &null;值并配对一个自动的键名。
    </para>
    
    <example>
     <title>生成&null;s</title>
     <programlisting role="php">
<![CDATA[
<?php
function gen_three_nulls() {
    foreach (range(1, 3) as $i) {
        yield;
    }
}

var_dump(iterator_to_array(gen_three_nulls()));
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
array(3) {
  [0]=>
  NULL
  [1]=>
  NULL
  [2]=>
  NULL
}
]]>
     </screen>
    </example>
   </sect3>
   
   <sect3 xml:id="control-structures.yield.references">
    <title>使用引用来生成值</title>
    
    <para>
     生成函数可以像使用值一样来使用引用生成。这个和<link linkend="functions.returning-values">returning references from functions</link>（从函数返回一个引用）一样：通过在函数名前面加一个引用符号。
    </para>
    
    <example>
     <title>使用引用来生成值</title>
     <programlisting role="php">
<![CDATA[
<?php
function &gen_reference() {
    $value = 3;

    while ($value > 0) {
        yield $value;
    }
}

/* 
 * 我们可以在循环中修改$number的值，而生成器是使用的引用值来生成，所以gen_reference()内部的$value值也会跟着变化。
 */
foreach (gen_reference() as &$number) {
    echo (--$number).'... ';
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
2... 1... 0... 
]]>
     </screen>
    </example>
   </sect3>

   <sect3 xml:id="control-structures.yield.from">
    <title>Generator delegation via <command>yield from</command></title>

    <para>
     In PHP 7, generator delegation allows you to yield values from another
     generator, <classname>Traversable</classname> object, or
     <type>array</type> by using the <command>yield from</command> keyword.
     The outer generator will then yield all values from the inner generator,
     object, or array until that is no longer valid, after which execution
     will continue in the outer generator.
    </para>

    <para>
     If a generator is used with <command>yield from</command>, the
     <command>yield from</command> expression will also return any value
     returned by the inner generator.
    </para>

    <example>
     <title>Basic use of <command>yield from</command></title>
     <programlisting role="php">
<![CDATA[
<?php
function count_to_ten() {
    yield 1;
    yield 2;
    yield from [3, 4];
    yield from new ArrayIterator([5, 6]);
    yield from seven_eight();
    yield 9;
    yield 10;
}

function seven_eight() {
    yield 7;
    yield from eight();
}

function eight() {
    yield 8;
}

foreach (count_to_ten() as $num) {
    echo "$num ";
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
1 2 3 4 5 6 7 8 9 10 
]]>
     </screen>
    </example>

    <example>
     <title><command>yield from</command> and return values</title>
     <programlisting role="php">
<![CDATA[
<?php
function count_to_ten() {
    yield 1;
    yield 2;
    yield from [3, 4];
    yield from new ArrayIterator([5, 6]);
    yield from seven_eight();
    return yield from nine_ten();
}

function seven_eight() {
    yield 7;
    yield from eight();
}

function eight() {
    yield 8;
}

function nine_ten() {
    yield 9;
    return 10;
}

$gen = count_to_ten();
foreach ($gen as $num) {
    echo "$num ";
}
echo $gen->getReturn();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
1 2 3 4 5 6 7 8 9 10
]]>
     </screen>
    </example>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="language.generators.comparison">
  <title>Comparing generators with <classname>Iterator</classname> objects</title>
  
  <para>
   The primary advantage of generators is their simplicity. Much less
   boilerplate code has to be written compared to implementing an
   <classname>Iterator</classname> class, and the code is generally much more
   readable. For example, the following function and class are equivalent:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getLinesFromFile($fileName) {
    if (!$fileHandle = fopen($fileName, 'r')) {
        return;
    }
 
    while (false !== $line = fgets($fileHandle)) {
        yield $line;
    }
 
    fclose($fileHandle);
}

// versus...

class LineIterator implements Iterator {
    protected $fileHandle;
 
    protected $line;
    protected $i;
 
    public function __construct($fileName) {
        if (!$this->fileHandle = fopen($fileName, 'r')) {
            throw new RuntimeException('Couldn\'t open file "' . $fileName . '"');
        }
    }
 
    public function rewind() {
        fseek($this->fileHandle, 0);
        $this->line = fgets($this->fileHandle);
        $this->i = 0;
    }
 
    public function valid() {
        return false !== $this->line;
    }
 
    public function current() {
        return $this->line;
    }
 
    public function key() {
        return $this->i;
    }
 
    public function next() {
        if (false !== $this->line) {
            $this->line = fgets($this->fileHandle);
            $this->i++;
        }
    }
 
    public function __destruct() {
        fclose($this->fileHandle);
    }
}
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   This flexibility does come at a cost, however: generators are forward-only
   iterators, and cannot be rewound once iteration has started. This also
   means that the same generator can't be iterated over multiple times: the
   generator will need to either be rebuilt by calling the generator function
   again, or cloned via the
   <link linkend="language.oop5.cloning">clone</link> keyword.
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
