<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 341282 Maintainer: Altair Status: ready -->
<!-- CREDITS: Gregory, dallas -->
<sect1 xml:id="language.types.integer">
 <title>Integer 整型</title>
 
 <simpara>
   <type>integer</type> 是集合 &#8484; = {..., -2, -1, 0, 1, 2, ...} 中的某个数。
 </simpara>
  
 <para>
  参见：
 </para>

 <itemizedlist>
  <listitem>
   <simpara>
    <link linkend="book.gmp">任意长度整数／GMP</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="language.types.float">浮点型</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="book.bc">任意精度数学库／BCMath</link>
   </simpara>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="language.types.integer.syntax">
  <title>语法</title>

  <simpara>
   整型值可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。
  </simpara>

  <para>
   二进制表达的 <type>integer</type> 自 PHP 5.4.0 起可用。
  </para>
  <para>
   要使用八进制表达，数字前必须加上
   <literal>0</literal>（零）。要使用十六进制表达，数字前必须加上
   <literal>0x</literal>。要使用二进制表达，数字前必须加上
   <literal>0b</literal>。
  </para>

  <example>
   <title>整数文字表达</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // 十进制数
$a = -123; // 负数
$a = 0123; // 八进制数 (等于十进制 83)
$a = 0x1A; // 十六进制数 (等于十进制 26)
$a = 0b11111111; // 二进制数字 (等于十进制 255)
?>
]]>
   </programlisting>
  </example>

  <para>
   <type>integer</type> 语法的结构形式是：
  </para>
 
  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+

octal       : 0[0-7]+

binary      : 0b[01]+

integer     : [+-]?decimal
            | [+-]?hexadecimal
            | [+-]?octal
            | [+-]?binary
]]>
   </programlisting>
  </informalexample>

  <para>
   整型数的字长和平台有关，尽管通常最大值是大约二十亿（32 位有符号）。64
   位平台下的最大值通常是大约 9E18，除了 Windows 下 PHP 7 以前的版本，总是 32 位的。
   
   PHP 不支持无符号的 <type>integer</type>。<type>Integer</type> 值的字长可以用常量
   <constant>PHP_INT_SIZE</constant>来表示，自
   PHP 4.4.0 和 PHP 5.0.5后，最大值可以用常量 <constant>PHP_INT_MAX</constant> 来表示，最小值可以在 PHP 7.0.0 及以后的版本中用常量 <constant>PHP_INT_MIN</constant> 表示。
  </para>

  <warning>
   <para>
    PHP 7 以前的版本里，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略。PHP 7 以后，会产生 Parse Error。
   </para>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>整数溢出</title>

  <para>
   如果给定的一个数超出了 <type>integer</type> 的范围，将会被解释为
   <type>float</type>。同样如果执行的运算结果超出了
   <type>integer</type> 范围，也会返回 <type>float</type>。
  </para>

  <example>
   <title>32 位系统下的整数溢出</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>64 位系统下的整数溢出</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 9223372036854775807;
var_dump($large_number);                     // int(9223372036854775807)

$large_number = 9223372036854775808;
var_dump($large_number);                     // float(9.2233720368548E+18)

$million = 1000000;
$large_number =  50000000000000 * $million;
var_dump($large_number);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>

  <para>
   PHP 中没有整除的运算符。<literal>1/2</literal> 产生出 <type>float</type>
   <literal>0.5</literal>。
   值可以舍弃小数部分，强制转换为 <type>integer</type>，或者使用
   <function>round</function> 函数可以更好地进行四舍五入。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286) 
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4) 
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>转换为整型</title>

  <simpara>
   要明确地将一个值转换为 <type>integer</type>，用 <literal>(int)</literal> 或
   <literal>(integer)</literal> 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个
   <type>integer</type> 参数时，值会自动转换。还可以通过函数
   <function>intval</function> 来将一个值转换成整型。
  </simpara>

  <simpara>
   将 <type>resource</type> 转换成 <type>integer</type> 时，
   结果会是 PHP 运行时为 <type>resource</type> 分配的唯一资源号。
  </simpara>

  <simpara>
   参见：<link linkend="language.types.type-juggling">类型转换的判别</link>。
  </simpara>
   
  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>从<link linkend="language.types.boolean">布尔值</link>转换</title>

   <simpara>
    &false; 将产生出 <literal>0</literal>（零），&true; 将产生出
    <literal>1</literal>（壹）。
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    从<link linkend="language.types.float">浮点型</link>转换
   </title> 

   <simpara>
    当从浮点数转换成整数时，将<emphasis>向下</emphasis>取整。
   </simpara>
    
   <para>
    如果浮点数超出了整数范围（32 位平台下通常为
    <literal>+/- 2.15e+9 = 2^31</literal>，64 位平台下，除了 Windows，通常为
    <literal>+/- 9.22e+18 = 2^63</literal>），则结果为未定义，因为没有足够的精度给出一个确切的整数结果。在此情况下没有警告，甚至没有任何通知！
   </para>

   <note>
    <para>
     PHP 7.0.0 起，NaN 和 Infinity 在转换成 <type>integer</type> 时，不再是 undefined 或者依赖于平台，而是都会变成零。
    </para>
   </note>
    
   <warning>
    <para>
     绝不要将未知的分数强制转换为 <type>integer</type>，这样有时会导致不可预料的结果。
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // 显示 7!
?>
]]>
     </programlisting>
    </informalexample>
    
    <para>
     参见<link linkend="warn.float-precision">关于浮点数精度的警告</link>。
    </para>
   </warning>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>从字符串转换</title>

   <simpara>
    参见<link linkend="language.types.string.conversion">字符串转换为数值</link>。
   </simpara>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>从其它类型转换</title>

   <caution>
    <simpara>
     没有定义从其它类型转换为整型的行为。<emphasis>不要</emphasis>依赖任何现有的行为，因为它会未加通知地改变。
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
