<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341282 Maintainer: dallas Status: ready -->
<sect1 xml:id="language.types.callable">
 <title>Callback / Callable 类型</title>
 
 <para>
  自 PHP 5.4 起可用 <type>callable</type> 类型指定回调类型
  callback。本文档基于同样理由使用 <type>callback</type> 类型信息。
 </para>

 <para>
  一些函数如 <function>call_user_func</function> 或
  <function>usort</function> 可以接受用户自定义的回调函数作为参数。回调函数不止可以是简单函数，还可以是对象的方法，包括静态类方法。
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>传递</title>

  <para>
   PHP是将函数以<type>string</type>形式传递的。
   可以使用任何内置或用户自定义函数，但除了语言结构例如：<function>array</function>，<function>echo</function>，<function>empty</function>，<function>eval</function>，<function>exit</function>，<function>isset</function>，<function>list</function>，<function>print</function>
   或 <function>unset</function>。
  </para>

  <para>
   一个已实例化的 <type>object</type> 的方法被作为 <type>array</type> 传递，下标 0 包含该 <type>object</type>，下标 1 包含方法名。
   在同一个类里可以访问 protected 和 private 方法。
  </para>

  <para>
   静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自
   PHP 5.2.3 起，也可以传递 <literal>'ClassName::methodName'</literal>。
  </para>

  <para>
   除了普通的用户自定义函数外，也可传递
   <link linkend="functions.anonymous">匿名函数</link> 给回调参数。
  </para>

  <para>
   <example>
    <title>回调函数示例</title>
    <programlisting role="php">
<![CDATA[
<?php 

// An example callback function
function my_callback_function() {
    echo 'hello world!';
}

// An example callback method
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Type 1: Simple callback
call_user_func('my_callback_function'); 

// Type 2: Static class method call
call_user_func(array('MyClass', 'myCallbackMethod')); 

// Type 3: Object method call
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Type 4: Static class method call (As of PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Type 5: Relative static class method call (As of PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A

// Type 6: Objects implementing __invoke can be used as callables (since PHP 5.3)
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>使用 Closure 的示例</title>
   <programlisting role="php">
<![CDATA[
<?php
// Our closure
$double = function($a) {
    return $a * 2;
};

// This is our range of numbers
$numbers = range(1, 5);

// Use the closure as a callback here to 
// double the size of each element in our 
// range
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
