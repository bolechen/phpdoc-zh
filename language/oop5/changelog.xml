<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342129 Maintainer: daijie Status: ready -->
<sect1 xml:id="language.oop5.changelog" xmlns="http://docbook.org/ns/docbook">
 <title>OOP 变更日志</title>
 <para>
  PHP 5 OOP 模型的变更将被记录在此。功能的描述与其他相关注意事项记录在了 OOP 5 文档之中。
 </para>
 <para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Trait 里定义兼容的属性不再产生错误信息。
      </entry>
     </row>
     <row>
      <entry>5.6.0</entry>
      <entry>
       增加: <link linkend="object.debuginfo">__debugInfo()</link> 方法。
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       增加:  <link linkend="language.oop5.basic.class.class">::class</link> 魔法常量。
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       增加: <link linkend="language.exceptions">finally</link> 来处理异常。
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       增加： <link linkend="language.oop5.traits">traits</link>。
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       已变更：如果一个<link linkend="language.oop5.abstract">抽象</link> 类定义了构造函数的签名，它将必须被实现。
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       已变更： <link linkend="language.namespaces">命名空间</link> 中和类同名的方法不再被作为 <link
       linkend="language.oop5.decon">构造函数</link>。这个变更不影响非命名空间中的类。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       已变更：类实现接口的方法所具有的默认值不再需要和接口的默认值一致。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       已变更： 现在它也能够通过一个变量来引用一个类（例如，<literal>echo $classname::constant;</literal>）。
       这个变量的值不能是一个保留关键词（比如，<literal>self</literal>、<literal>parent</literal> 或 <literal>static</literal>）。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       已变更： 如果<link linkend="language.oop5.overloading">重载</link>方法被定义为 <link linkend="language.oop5.static">static</link> 将导致一个 <constant>E_WARNING</constant> 级别的错误。
       同时它也需要强制使用 public 的可见性。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       已变更： 在 5.3.0 之前的版本，<function>__autoload</function> 函数里抛出的异常不能被 <link linkend="language.exceptions">catch</link> 块结构捕获，并会导致一个致命错误。
       现在在一个前提下 <link linkend="language.exceptions">catch</link> 块能够捕获 __autoload 函数中抛出的错误。如果抛出一个自定义异常，这个自定义异常的类必须是可用的。否则 __autoload 函数可能递归自动加载这个自定义异常类。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       新增： <link linkend="language.oop5.overloading">__callStatic</link> 方法。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       新增： <link linkend="language.types.string.syntax.heredoc">heredoc</link>
       和 <link linkend="language.types.string.syntax.heredoc">nowdoc</link>
       支持类的 <emphasis>常量</emphasis> 和属性的定义。
       注意：heredoc 值必须和双引号字符串遵循同样的规则（比如，变量将被替换）。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       新增： <link linkend="language.oop5.late-static-bindings">后期静态绑定</link>。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       新增： <link linkend="object.invoke">__invoke</link> 方法。
      </entry>
     </row>
     <row>
      <entry>5.2.0</entry>
      <entry>
       已变更：<link linkend="object.tostring">__toString</link> 方法仅在直接与  <function>echo</function> 或 <function>print</function> 使用时被调用。但是现在它能在任何字符串上下文被调用（比如在 <function>printf</function> 中使用 <literal>%s</literal> ），但不是在其他类型的上下文被调用（例如 <literal>%d</literal> 修饰符）。
       自 PHP 5.2.0 起，将不具有 <literal>__toString</literal> 方法的对象转化为字符串将导致一个 <constant>E_RECOVERABLE_ERROR</constant> 级别的错误。
      </entry>
     </row>
     <row>
      <entry>5.1.3</entry>
      <entry>
       已变更：在 PHP 5 之前的版本，<literal>var</literal> 的使用已被废弃，并将产生一个 <constant>E_STRICT</constant> 级别的错误。现在它不再被废弃，因此也不会产生错误。
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       已变更：现在 <link linkend="object.set-state">__set_state</link> 静态方法在 <function>var_export</function> 导出类时会被调用。
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       新增：<link linkend="object.isset">__isset</link> 和 <link linkend="object.unset">__unset</link> 方法。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
