<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328167 Maintainer: HaoHappy Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>属性</title>

  <para>
   类的变量成员叫做“属性”，或者叫“字段”、“特征”，在本文档统一称为“属性”。属性声明是由关键字
   <literal>public</literal>，<literal>protected</literal> 或者
   <literal>private</literal> 开头，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是常数，这里的常数是指 PHP 脚本在编译阶段时就可以得到其值，而不依赖于运行时的信息才能求值。
  </para>
  <para>
   有关 <literal>public</literal>，<literal>protected</literal>
   和 <literal>private</literal> 的更多详细信息，请查看<xref linkend="language.oop5.visibility" />。
  </para>
  <note>
   <para>
    为了向后兼容 PHP 4，PHP 5 声明属性依然可以直接使用关键字 <literal>var</literal>
    来替代（或者附加于）<literal>public</literal>，<literal>protected</literal> 或
    <literal>private</literal>。但是已不再需要 <literal>var</literal> 了。在
    PHP 5.0 到 5.1.3，<literal>var</literal> 会被认为是废弃的，而且抛出
    <constant>E_STRICT</constant> 警告，但是 5.1.3 之后就不再认为是废弃，也不会抛出警告。
   </para>
   <para>
    如果直接使用 <literal>var</literal> 声明属性，而没有用
    <literal>public</literal>，<literal>protected</literal>
    或 <literal>private</literal> 之一，PHP 5 会将其视为 <literal>public</literal>。
   </para>
  </note>
  <para>
   在类的成员方法里面，可以用 <literal>-&gt;</literal>（对象运算符）：<varname>$this-&gt;property</varname>（其中
   <literal>property</literal> 是该属性名）这种方式来访问非静态属性。静态属性则是用
   <literal>::</literal>（双冒号）：<varname>self::$property</varname>
   来访问。更多静态属性与非静态属性的区别参见 <link linkend="language.oop5.static">Static 关键字</link>。
  </para>
  <para>
   当一个方法在类定义内部被调用时，有一个可用的伪变量
   <varname>$this</varname>。<varname>$this</varname>
   是一个到主叫对象的引用（通常是该方法所从属的对象，但如果是从第二个对象<link
   linkend="language.oop5.static">静态</link>调用时也可能是另一个对象）。
  </para>

  <para>
   <example>
    <title>属性声明</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // 错误的属性声明
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 正确的属性声明
   public $var6 = myConstant;
   public $var7 = array(true, false);

   //在 PHP 5.3.0 及之后，下面的声明也正确
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    更多关于类／对象的处理函数，请查看<link linkend="ref.classobj">类／对象函数</link>。
   </para>
  </note>

  <para>
   跟 <link linkend="language.types.string.syntax.heredoc">heredocs</link>
   不同，<link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
   可在任何静态数据上下文中使用，包括属性声明。
   <example>
    <title>示例：使用 nowdoc 初始化属性</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // 自 5.3.0 起
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Nowdoc 支持是在 PHP 5.3.0 新增的。
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
