<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 288721 Maintainer: Haohappy Status: ready -->
<sect1 xml:id="language.oop5.patterns" xmlns="http://docbook.org/ns/docbook">
 <title>设计模式</title>
 <para>
  使用设计模式是促进最佳实践和良好设计的好办法。设计模式可以提供针对常见的编程问题的灵活的解决方案。
 </para>

 <sect2 xml:id="language.oop5.patterns.factory">
  <title>工厂模式</title>
  <para>
工厂模式（Factory）允许你在代码执行时实例化对象。它之所以被称为工厂模式是因为它负责“生产”对象。工厂方法的参数是
你要生成的对象对应的类名称。

  </para>
  <example>
   <title>调用工厂方法（带参数）</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // The parameterized factory method
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Driver not found');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
  按上面的方式可以动态加载drivers。如果<literal>Example</literal>类是一个数据库抽象类，那么
    可以这样来生成<literal>MySQL</literal>和 <literal>SQLite</literal>驱动对象：
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Load a MySQL Driver
$mysql = Example::factory('MySQL');

// Load a SQLite Driver
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.patterns.singleton">
  <title>单例</title>
  <para>   
   单例模式（Singleton）用于为一个类生成一个唯一的对象。最常用的地方是数据库连接。
   使用单例模式生成一个对象后，该对象可以被其它众多对象所使用。
  </para>
  <example>
   <title>单例模式</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // 保存类实例在此属性中
    private static $instance;
    
    // 构造方法声明为private，防止直接创建对象
    private function __construct() 
    {
        echo 'I am constructed';
    }

    // singleton 方法
    public static function singleton() 
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Example类中的普通方法
    public function bark()
    {
        echo 'Woof!';
    }

    // 阻止用户复制对象实例
    public function __clone()
    {
        trigger_error('Clone is not allowed.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>    
    这样我们可以得到一个独一无二的<literal>Example</literal>类的对象。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// 这个写法会出错，因为构造方法被声明为private
$test = new Example;

// 下面将得到Example类的单例对象
$test = Example::singleton();
$test->bark();

// 复制对象将导致一个E_USER_ERROR.
$test_clone = clone $test;

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
