<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 334638 Maintainer: Haohappy Status: ready -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>魔术方法</title>
  <para>
   <link linkend="object.construct">__construct()</link>，
   <link linkend="object.destruct">__destruct()</link>，
   <link linkend="object.call">__call()</link>，
   <link linkend="object.callstatic">__callStatic()</link>，
   <link linkend="object.get">__get()</link>，
   <link linkend="object.set">__set()</link>，
   <link linkend="object.isset">__isset()</link>，
   <link linkend="object.unset">__unset()</link>，
   <link linkend="object.sleep">__sleep()</link>，
   <link linkend="object.wakeup">__wakeup()</link>，
   <link linkend="object.tostring">__toString()</link>，
   <link linkend="object.invoke">__invoke()</link>，
   <link linkend="object.set-state">__set_state()</link>，
   <link linkend="object.clone">__clone()</link> 和 
   <link linkend="object.debuginfo">__debugInfo()</link>
   等方法在 PHP 中被称为<quote>魔术方法</quote>（Magic
   methods）。在命名自己的类方法时不能使用这些方法名，除非是想使用其魔术功能。
  </para>

  <caution>
   <simpara>
    PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以
    __ 为前缀。
   </simpara>
  </caution>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> 和
    <link linkend="object.wakeup">__wakeup()</link>
   </title>
   
   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <function>serialize</function> 函数会检查类中是否存在一个魔术方法
    <link linkend="object.sleep">__sleep()</link>。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则
    &null; 被序列化，并产生一个 <constant>E_NOTICE</constant> 级别的错误。
    </para>
   <note>
    <para>
     <link linkend="object.sleep">__sleep()</link> 不能返回父类的私有成员的名字。这样做会产生一个
     <constant>E_NOTICE</constant> 级别的错误。可以用
     <classname>Serializable</classname> 接口来替代。
    </para>
   </note>
    
    
   <para>
    <link linkend="object.sleep">__sleep()</link> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。
   </para>
   <para>
    与之相反，<function>unserialize</function> 会检查是否存在一个 <link linkend="object.wakeup">__wakeup()</link>
    方法。如果存在，则会先调用 <literal>__wakeup</literal> 方法，预先准备对象需要的资源。
   </para>
   <para>
    <link linkend="object.wakeup">__wakeup()</link> 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。
   </para>
   <example>
    <title>Sleep 和 wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection 
{
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <link linkend="object.tostring">__toString()</link> 方法用于一个类被当成字符串时应怎样回应。例如
    <literal>echo $obj;</literal> 应该显示些什么。此方法必须返回一个字符串，否则将发出一条
    <constant>E_RECOVERABLE_ERROR</constant> 级别的致命错误。
   </para>
   <warning>
    <simpara>
     不能在 <link linkend="object.tostring">__toString()</link>
     方法中抛出异常。这么做会导致致命错误。
    </simpara>
   </warning>
   <example>
    <title>简单示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declare a simple class
class TestClass
{
    public $foo;

    public function __construct($foo) 
    {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
   <para>
    需要指出的是在 PHP 5.2.0 之前，<link linkend="object.tostring">__toString()</link>
    方法只有在直接使用于 <function>echo</function> 或 <function>print</function>
    时才能生效。PHP 5.2.0 之后，则可以在任何字符串环境生效（例如通过
    <function>printf</function>，使用 <literal>%s</literal> 修饰符），但不能用于非字符串环境（如使用
    <literal>%d</literal> 修饰符）。自 PHP 5.2.0 起，如果将一个未定义
    <link linkend="object.tostring">__toString()</link> 方法的对象转换为字符串，会产生
    <constant>E_RECOVERABLE_ERROR</constant> 级别的错误。
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    当尝试以调用函数的方式调用一个对象时，<link linkend="object.invoke">__invoke()</link> 方法会被自动调用。
   </para>
   <note>
    <para>     
     本特性只在 PHP 5.3.0 及以上版本有效。
    </para>
   </note>
   <example>
    <title>使用 <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass 
{
    function __invoke($x) {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    自 PHP 5.1.0 起当调用 <function>var_export</function> 导出类时，此<link
    linkend="language.oop5.static">静态</link> 方法会被调用。
   </para>
   <para>
    本方法的唯一参数是一个数组，其中包含按 <literal>array('property' => value, ...)</literal> 格式排列的类属性。
   </para>
   <example>
    <title>使用 <link linkend="object.set-state">__set_state()</link>>（PHP 5.1.0 起）</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // As of PHP 5.1.0
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </sect2>
  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    This method is called by <function>var_dump</function> when dumping an
    object to get the properties that should be shown. If the method isn't
    defined on an object, then all public, protected and private properties
    will be shown.
   </para>
   <para>
    This feature was added in PHP 5.6.0.
   </para>
   <example>
    <title>Using <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
