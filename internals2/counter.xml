<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- $EN-Revision: 297078 $ -->
 <part xml:id="internals2.counter" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>"counter" 扩展 - 一个连续的实例</title>
  
  <partintro xml:id="internals2.counter.preface">
   <title>序言</title>
   <simpara>
    贯穿于整个 Zend 文档之中，参考文档中制作了一个实例模块用来阐述各种概念。
    “counter”扩展就是这样一个范例，为了阐述各种概念，通过一个假定的但起作用的 Zend
    模块，争取在合理情况下地尽可能多地使用 Zend API。这个短章节描述了整个扩展的用户接口。
   </simpara>
  
   <note>
    <simpara>
     “counter”没有任何实际用途，所提供的功能就是来提供极为有效的通过适当的用户库实现的代码。
    </simpara>
   </note>
  </partintro>
  
  <chapter xml:id="internals2.counter.setup">
   &reftitle.setup;

   <section xml:id="internals2.counter.intro">
    &reftitle.intro;
  
    <simpara>
    “counter”扩展提供在 PHP 代码中加入许多计数器，并可由调用者决定什么时候进行重置。
    </simpara>
   
    <simpara>
     “counter”有 3 种接口: 简单接口, 扩展接口, 对象化接口。
     简单接口提供用 INI 设置文件控制的单个计数器的功能调用。
     扩展接口提供被命名的任意多个计数器，并可选择进行持久化以用于多个的 PHP
     请求生命周期内。
     对象化接口则将简单接口和扩展接口融合成为<classname>Counter</classname>类。
    </simpara>
   </section>
  
   <section xml:id="internals2.counter.ini">
    &reftitle.runtime;

    &extension.runtime;
    <table>
     <title>counter 配置选项</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>名称</entry>
        <entry>默认值</entry>
        <entry>可变性</entry>
        <entry>修改日志</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>counter.reset_time</entry>
        <entry>COUNTER_RESET_PER_REQUEST</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
       <row>
        <entry>counter.save_path</entry>
        <entry>""</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
       <row>
        <entry>counter.initial_value</entry>
        <entry>"0"</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <simpara>&ini.php.constants;</simpara>

    <variablelist>
     <varlistentry xml:id="internals2.counter.ini.reset-time">
      <term>
       <parameter>counter.reset_time</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <simpara>
        <varname>counter.reset_time</varname> 使 "counter" 使用简单接口进行重置。
        可使用类似
        <constant>COUNTER_RESET_*</constant> 的常量(见下文)。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="internals2.counter.ini.save-path">
      <term>
       <parameter>counter.save_path</parameter>
       <type>string</type>
      </term>
      <listitem>
       <simpara>
        告诉 "counter" 在哪保存那些在启动 PHP 间必需持久化的数据 (比如，计数器包含COUNTER_RESET_NEVER 或
        COUNTER_FLAG_SAVE 选项)。一个文件将创建在此路径下，运行 PHP
        的用户对此路径必须有可读写权限。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="internals2.counter.ini.initial-value">
      <term>
       <parameter>counter.initial_value</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <simpara>
        使用简单接口设置进行重置时，设定的计数器初始值。
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>

   </section>

   <section xml:id="internals2.counter.resources">
    &reftitle.resources;
   
    <simpara>
     "counter" 扩展定义了一个资源类型：计数器。
    </simpara>
   </section>

  </chapter>
  
  <appendix xml:id="internals2.counter.constants">
   &reftitle.constants;
   &extension.constants;

   <variablelist>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_PERSIST</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       有此标志的计数器会作为持久化资源进行创建。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_SAVE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       有此标志的计数器会在启动 PHP 间保存。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_NO_OVERWRITE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       此标志触发 <function>counter_create</function>
       函数以避免覆盖一个名称已存在的计数器而创建一个新的。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_META_NAME</constant>
      (<type>string</type>)
     </term>
     <listitem>
      <simpara>
       传递此常量以获取计数器资源/对象的名称。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_META_IS_PERISTENT</constant>
      (<type>string</type>)
     </term>
     <listitem>
      <simpara>
       传递此常量来指定计数器资源/对象进行持久化
       (有 <constant>COUNTER_FLAG_PERSIST</constant> 标志)
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_NEVER</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       此计数器不会被重置。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_PER_LOAD</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       此计数器每次启动 PHP 时都会被重置。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_PER_REQUEST</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       此计数器每次请求时都会被重置。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </appendix>

  <chapter xml:id="internals2.counter.examples">
   &reftitle.examples;
   
   <section xml:id="internals2.counter.examples.basic">
    <title>简单接口</title>
    
    <simpara>
     简单接口提供 3 个简单的函数，实例如下：
    </simpara>
   
    <example xml:id="internals2.counter.examples.basic.ex">
     <title>"counter"的简单接口</title>
     <programlisting role="php">
<![CDATA[
<?php
$starting_counter_value = counter_get();
counter_bump(1);
$second_counter_value = counter_get();
counter_reset();
$final_counter_value = counter_get();
printf("%3d %3d %3d", $starting_counter_value, $second_counter_value, $final_counter_value);
?>
]]>
     </programlisting>
    </example>
    &example.outputs;
    <screen>
<![CDATA[
  0   1   0]]></screen>
   
    <simpara>
     简单接口也提供一系列
     <link linkend="internals2.counter.constants">INI settings</link>.
    </simpara>
   </section>
   
   <section xml:id="internals2.counter.examples.extended">
    <title>扩展接口</title>
    
    <simpara>
     扩展接口提供小的一整套函数，允许用户根据设置定义任意数量名称唯一的计数器。简单接口可与扩展接口同时使用。
    </simpara>
    
    <example xml:id="internals2.counter.examples.extended.ex">
     <title>"counter"的扩展接口</title>
     <programlisting role="php">
<![CDATA[
<?php
function print_counter_info($counter)
{
    if (is_resource($counter)) {
        printf("计数器的名称为 '%s'，且%s进行持久化。其当前值为 %d.\n",
            counter_get_meta($counter, COUNTER_META_NAME),
            counter_get_meta($counter, COUNTER_META_IS_PERSISTENT) ? '' : '不',
            counter_get_value($counter));
    } else {
      print "计数器无效!\n";
    }
}

if (($counter_one = counter_get_named("one")) === NULL) {
    $counter_one = counter_create("one", 0, COUNTER_FLAG_PERSIST);
}
counter_bump_value($counter_one, 2);
$counter_two = counter_create("two", 5);
$counter_three = counter_get_named("three");
$counter_four = counter_create("four", 2, COUNTER_FLAG_PERSIST | COUNTER_FLAG_SAVE | COUNTER_FLAG_NO_OVERWRITE);
counter_bump_value($counter_four, 1);

print_counter_info($counter_one);
print_counter_info($counter_two);
print_counter_info($counter_three);
print_counter_info($counter_four);
?>
]]>
     </programlisting>
     <simpara>
      首次运行时，以上例子的输出为：
     </simpara>
     <screen>
<![CDATA[
计数器的名称为 'one'，且进行持久化。其当前值为 2.
计数器的名称为 'two'，且不进行持久化。其当前值为 5.
计数器无效!
计数器的名称为 'four'，且进行持久化。其当前值为 3.]]></screen>
     <simpara>
      在同一 PHP 实例中第 2 次运行时的输出为:
     </simpara>
     <screen>
<![CDATA[
计数器的名称为 'one'，且进行持久化。其当前值为 4.
计数器的名称为 'two'，且不进行持久化。其当前值为 5.
计数器无效!
计数器的名称为 'four'，且进行持久化。其当前值为 4.]]></screen>
     <simpara>
      <emphasis>在另一个 PHP 实例中</emphasis>第 3 次运行时的输出为：
     </simpara>
     <screen>
<![CDATA[
计数器的名称为 'one'，且进行持久化。其当前值为 2.
计数器的名称为 'two，且不进行持久化。其当前值为 5.
计数器无效!
计数器的名称为 'four'，且进行持久化。其当前值为 5.]]></screen>
    </example>
   </section>
   
   <section xml:id="internals2.counter.examples.objective">
    <title>对象化接口</title>
    
    <simpara>
     对象接口提供一个面向对象的方式来访问扩展接口。下面的例子显示了使用对象化接口实现上面的例子。此例子的输出，除了所显示“计数器无效!”变为由 PHP 发出的变量 <literal>$counter_three</literal> 不是对象的警告信息以外，其他完全一样。此例子展示了定义在扩展中定义的 <classname>Counter</classname>
     的子类，并对实例变量而不是用方法存取计数器的值。
    </simpara>
    
    <example xml:id="internals2.counter.examples.objective.ex">
     <title>"counter" 的对象化接口</title>
     
     <programlisting role="php">
<![CDATA[
<?php
class MyCounter extends Counter
{
    public function printCounterInfo() {
        printf("计数器的名称为 '%s'，且%s进行持久化。其当前值为 %d.\n",
            $this->getMeta(COUNTER_META_NAME),
            $this->getMeta(COUNTER_META_IS_PERSISTENT) ? '' : '不',
            $this->value);
    }
}

Counter::setCounterClass("MyCounter");
if (($counter_one = Counter::getNamed("one")) === NULL) {
    $counter_one = new Counter("one", 0, COUNTER_FLAG_PERSIST);
}
$counter_one->bumpValue(2); // 不允许直接 "set" 值
$counter_two = new Counter("two", 5);
$counter_three = Counter::getNamed("three");
$counter_four = new Counter("four", 2, COUNTER_FLAG_PERSIST | COUNTER_FLAG_SAVE | COUNTER_FLAG_NO_OVERWRITE);
$counter_four->bumpValue(1);

$counter_one->printCounterInfo();
$counter_two->printCounterInfo();
$counter_three->printCounterInfo();
$counter_four->printCounterInfo();
?>
]]>
     </programlisting>
    </example>
   </section>

  </chapter>
  
  <reference xml:id="internals2.counter.counter-class">
   <title>Counter 类</title>
   <titleabbrev>Counter</titleabbrev>
   
   <partintro>
    <section xml:id="internals2.counter.counter-class.intro">
     &reftitle.intro;
     <simpara>
      表示一个独立的计数器对象。
     </simpara>
    </section>
   
    <section xml:id="internals2.counter.counter-class.synopsis">
     &reftitle.classsynopsis;
     
     <classsynopsis>
      <ooclass><classname>Counter</classname></ooclass>
     
      <classsynopsisinfo>
       <ooclass><classname>Counter</classname></ooclass>
      </classsynopsisinfo>
 
      <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('internals2.counter.counter-class')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[1])" />
      <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('internals2.counter.counter-class')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
     </classsynopsis>
    </section>
   </partintro>
   
   <refentry xml:id="internals2.counter.counter-class.construct" role="noversion">
    <refnamediv>
     <refname>Counter::__construct</refname>
     <refpurpose>
      创建一个包含单一数值的计数器实例。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <constructorsynopsis>
      <methodname>Counter::__construct</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>initial_value</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>flags</parameter></methodparam>
     </constructorsynopsis>
     <simpara>
      创建一个包含单一数值的 Counter 实例。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term>name</term>
       <listitem>
        <simpara>
         新计数器的名称。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>initial_value</term>
       <listitem>
        <simpara>
         计数器的初始值。默认为零(0)。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>flags</term>
       <listitem>
        <simpara>
         新计数器的标志，可在形如
         <literal>COUNTER_FLAG_*</literal> 的常量中选择。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      成功则返回 Counter 对象。
     </simpara>
    </refsect1>
    <refsect1 role="errors">
     &reftitle.errors;
     <simpara>
      <function>Counter::__construct</function> 在有错时抛出一个异常(Exception)。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.getValue" role="noversion">
    <refnamediv>
     <refname>Counter::getValue</refname>
     <refpurpose>
      获取计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>Counter::getValue</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>Counter::getValue</function> 返回计数器的当前值
     </simpara>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getValue</function> 返回一个整数。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::bumpValue</function></member>
      <member><function>Counter::resetValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.bumpValue" role="noversion">
    <refnamediv>
     <refname>Counter::bumpValue</refname>
     <refpurpose>
      修改计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>Counter::bumpValue</methodname>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::bumpValue</function> 更新计数器的当前值。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         计数器值的变化量。可为负数。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::getValue</function></member>
      <member><function>Counter::resetValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.resetValue" role="noversion">
    <refnamediv>
     <refname>Counter::resetValue</refname>
     <refpurpose>
      重置计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>Counter::resetValue</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>Counter::resetValue</function> 将计数器的当前值重置为其初始值。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::getValue</function></member>
      <member><function>Counter::bumpValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.counter-class.getMeta" role="noversion">
    <refnamediv>
     <refname>Counter::getMeta</refname>
     <refpurpose>
      返回计数器的部分元信息。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>Counter::getMeta</methodname>
      <methodparam><type>integer</type><parameter>attribute</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::getMeta</function> 返回一个计数器的元信息。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>attribute</parameter></term>
       <listitem>
        <simpara>
         要取回的元信息。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getMeta</function> 根据所请求的元数据返回不同类型的值。
     </simpara>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.counter-class.getNamed" role="noversion">
    <refnamediv>
     <refname>Counter::getNamed</refname>
     <refpurpose>
      取回一个名称已存在的计数器。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <modifier>static</modifier>
      <type>Counter</type><methodname>Counter::getNamed</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::getNamed</function> 通过名称查询一个已存在的计数器，不存在则返回&null;。这是静态函数。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         要查询的计数器名称。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getNamed</function> 通过名称查询一个已存在的计数器，不存在则返回&null;。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.setCounterClass" role="noversion">
    <refnamediv>
     <refname>Counter::setCounterClass</refname>
     <refpurpose>
      设置由 <methodname>Counter::getNamed</methodname> 返回的计数器类。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <modifier>static</modifier>
      <type>void</type><methodname>Counter::setCounterClass</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::setCounterClass</function> 改变由
      <function>Counter::getNamed</function>
      返回的对象的类。要设置的类可以没有 pulic 的构造器，但必须是
      <classname>Counter</classname>
      的子类。如果不满足这些条件，则会引发致命错误。这是静态函数。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         要使用的类名。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
   </refentry>

  </reference>
  
  <reference xml:id="internals2.counter.basic-interface">
   <title>简单接口</title>
   <titleabbrev>Basic</titleabbrev>

   <refentry xml:id="internals2.counter.function.counter-get" role="noversion">
    <refnamediv>
     <refname>counter_get</refname>
     <refpurpose>
      获取简单计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>counter_get</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>counter_get</function> 返回使用简单接口的计数器的当前值。
     </simpara>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get</function> 返回一个整数。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_bump</function></member>
      <member><function>counter_reset</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-bump" role="noversion">
    <refnamediv>
     <refname>counter_bump</refname>
     <refpurpose>
      修改简单计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>counter_bump</methodname>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_bump</function> 修改使用简单接口的计数器的当前值。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         计数器值的变化量。可为负数。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get</function></member>
      <member><function>counter_reset</function></member>
     </simplelist>
    </refsect1>
   </refentry>
  
   <refentry xml:id="internals2.counter.function.counter-reset" role="noversion">
    <refnamediv>
     <refname>counter_reset</refname>
     <refpurpose>
      重置简单计数器的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>counter_reset</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>counter_reset</function> 重置使用简单接口的计数器的当前值。.
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get</function></member>
      <member><function>counter_bump</function></member>
     </simplelist>
    </refsect1>
   </refentry>

  </reference>

  <reference xml:id="internals2.counter.extended-interface">
   <title>扩展接口</title>
   <titleabbrev>Extended</titleabbrev>

   <refentry xml:id="internals2.counter.function.counter-create" role="noversion">
    <refnamediv>
     <refname>counter_create</refname>
     <refpurpose>
      创建一个包含单个数值的计数器。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>counter_create</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>initial_value</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      创建一个包含单个数值的计数器。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term>name</term>
       <listitem>
        <simpara>
         新的计数器名称。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>initial_value</term>
       <listitem>
        <simpara>
         计数器的初值值. 默认为零(0)。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>flags</term>
       <listitem>
        <simpara>
         新计数器的标志, 从形如
         <literal>COUNTER_FLAG_*</literal> 的常量中选择。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      返回计数器资源。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-get-value" role="noversion">
    <refnamediv>
     <refname>counter_get_value</refname>
     <refpurpose>
      获取计数器资源的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>counter_get_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_value</function> 返回计数器资源的当前值。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         要操作的计数器资源。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_value</function> 返回一个整数.
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_bump_value</function></member>
      <member><function>counter_reset_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-bump-value" role="noversion">
    <refnamediv>
     <refname>counter_bump_value</refname>
     <refpurpose>
      更新计数器资源的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>counter_bump_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_bump_value</function> 更新计数器资源的当前值。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         要操作的计数器资源。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         计数器值的变化量。可为负数。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get_value</function></member>
      <member><function>counter_reset_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-reset-value" role="noversion">
    <refnamediv>
     <refname>counter_reset_value</refname>
     <refpurpose>
      重置计数器资源的当前值。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>counter_reset_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_reset_value</function> 将计数器资源的当前值重置为其初始值。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         要操作的计数器资源。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get_value</function></member>
      <member><function>counter_bump_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.function.counter-get-meta" role="noversion">
    <refnamediv>
     <refname>counter_get_meta</refname>
     <refpurpose>
      返回计数器资源的部分元信息。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>counter_get_meta</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
      <methodparam><type>integer</type><parameter>attribute</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_meta</function> 返回计数器资源的元信息。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         要操作的计数器资源。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>attribute</parameter></term>
       <listitem>
        <simpara>
         要取回的元信息。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_meta</function> 根据所请求的元数据返回不同类型的值。
     </simpara>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.function.counter-get-named" role="noversion">
    <refnamediv>
     <refname>counter_get_named</refname>
     <refpurpose>
      按名称查询一个已存在的计数器，并作为资源返回。
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>Counter::getNamed</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_named</function> 返回一个存在的计数器名称名称不存在则返回&null;。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         要查询的计数器名称。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_name</function> 返回一个存在的计数器名称，名称不存在则返回&null;。
     </simpara>
    </refsect1>
   </refentry>

  </reference>

 </part>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
