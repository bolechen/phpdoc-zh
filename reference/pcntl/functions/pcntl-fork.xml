<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.pcntl-fork" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_fork</refname>
  <refpurpose>
  在当前进程当前位置产生分支（子进程）。译注：fork是创建了一个子进程，父进程和子进程
  都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程
  号，而子进程得到的是0。
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_fork</methodname>
   <void/>
  </methodsynopsis>
  <para>
  <function>pcntl_fork</function>函数创建一个子进程，这个子进程仅PID（进程号）
  和PPID（父进程号）与其父进程不同。fork怎样在您的系统工作的详细信息请查阅您的系统
  的fork（2）手册。
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
  成功时，在父进程执行线程内返回产生的子进程的PID，在子进程执行线程内返回0。失败时，在
  父进程上下文返回-1，不会创建子进程，并且会引发一个PHP错误。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pcntl_fork</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
//父进程和子进程都会执行下面代码
if ($pid == -1) {
    //错误处理：创建子进程失败时返回-1.
     die('could not fork');
} else if ($pid) {
     //父进程会得到子进程号，所以这里是父进程执行的逻辑
     pcntl_wait($status); //等待子进程中断，防止子进程成为僵尸进程。
} else {
     //子进程得到的$pid为0, 所以这里是子进程执行的逻辑。
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_waitpid</function></member>
    <member><function>pcntl_signal</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
