<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
<refentry xml:id="function.ereg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ereg_replace</refname>
  <refpurpose>正则表达式替换</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>string</type><methodname>ereg_replace</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   本函数在 <parameter>string</parameter> 中扫描与
   <parameter>pattern</parameter> 匹配的部分，并将其替换为
   <parameter>replacement</parameter>。
  </simpara>
  <simpara>
   返回替换后的字符串。（如果没有可供替换的匹配项则会返回原字符串。）
  </simpara>
  <simpara>
   如果 <parameter>pattern</parameter>
   包含有括号内的子串，则 <parameter>replacement</parameter>
   可以包含形如
   <literal>\\<replaceable>digit</replaceable></literal>
   的子串，这些子串将被替换为数字表示的的第几个括号内的子串；<literal>\\0</literal>
   则包含了字符串的整个内容。最多可以用九个子串。括号可以嵌套，此情形下以左圆括号来计算顺序。
  </simpara>
  <simpara>
   如果未在 <parameter>string</parameter>
   中找到匹配项，则
   <parameter>string</parameter> 将原样返回。
  </simpara>
  <para>
   例如，下面的代码片断输出
   "This was a test" 三次：
  </para>
  <para>
   <example>
    <title><function>ereg_replace</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = "This is a test";
echo str_replace(" is", " was", $string);
echo ereg_replace("( )is", "\\1was", $string);
echo ereg_replace("(( )is)", "\\2was", $string);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   要注意的一点是如果在 <parameter>replacement</parameter>
   参数中使用了整数值，则可能得不到所期望的结果。这是因为
   <function>ereg_replace</function> 将把数字作为字符的序列值来解释并应用之。例如：
  </para>
  <para>
   <example>
    <title><function>ereg_replace</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
/* 不能产生出期望的结果 */
$num = 4;
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Output: 'This string has   words.' */

/* 本例工作正常 */
$num = '4';
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Output: 'This string has 4 words.' */
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>将 URL 替换为超连接</title>
    <programlisting role="php">
<![CDATA[
<?php
$text = ereg_replace("[[:alpha:]]+://[^<>[:space:]]+[[:alnum:]/]",
                     "<a href=\"\\0\">\\0</a>", $text);
?>
]]>
    </programlisting>
   </example>
  </para>
  <tip>
   <para>
    <function>preg_replace</function> 函数使用了
    Perl 兼容正则表达式语法，通常是比
    <function>ereg_replace</function> 更快的替代方案。
   </para>
  </tip>
  <para>
   参见 <function>ereg</function>，<function>eregi</function>，<function>eregi_replace</function>，<function>str_replace</function>
   和 <function>preg_match</function>。
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
