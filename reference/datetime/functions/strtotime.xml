<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337698 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.strtotime" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtotime</refname>
  <refpurpose>将任何字符串的日期时间描述解析为 Unix 时间戳</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>strtotime</methodname>
   <methodparam><type>string</type><parameter>time</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>now</parameter><initializer>time()</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   本函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为
   Unix 时间戳（自 January 1 1970 00:00:00 GMT 起的秒数），其值相对于
   <parameter>now</parameter> 参数给出的时间，如果没有提供此参数则用系统当前时间。
  </simpara>
  <para>
   本函数将使用 <envar>TZ</envar> 环境变量（如果有的话）来计算时间戳。自
   PHP 5.1.0 起有更容易的方法来定义时区用于所有的日期／时间函数。此过程在
   <function>date_default_timezone_get</function> 函数页面中有说明。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>time</parameter></term>
     <listitem>
      <para>&date.formats.parameter;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>now</parameter></term>
     <listitem>
      <para>
       用来计算返回值的时间戳。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功则返回时间戳，否则返回 &false;。在 PHP 5.1.0
   之前本函数在失败时返回 <literal>-1</literal>。
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Prior to PHP 5.3.0, relative time formats supplied to the
        <parameter>time</parameter> argument of <function>strtotime</function>
        such as <literal>this week</literal>, <literal>previous week</literal>,
        <literal>last week</literal>, and <literal>next week</literal> were
        interpreted to mean a 7 day period relative to the current date/time, rather
        than a week period of <literal>Monday</literal> through <literal>Sunday</literal>.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        在 PHP 5.3.0 之前， <literal>24:00</literal> 不是一个有效的格式，并且 <function>strtotime</function> 会返回 &false;。
       </entry>
      </row>
       <row>
       <entry>5.2.7</entry>
       <entry>
        In PHP 5 prior to 5.2.7, requesting a given occurrence of a
        given weekday in a month where that weekday was the first day
        of the month would incorrectly add one week to the returned
        timestamp. This has been corrected in 5.2.7 and later
        versions.
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
        失败时返回 &false;，不再是 <literal>-1</literal>。
       </entry>
      </row>
      
      &date.timezone.errors.changelog;

      <row>
       <entry>5.0.2</entry>
       <entry>
        在 PHP 5 中到 5.0.2 之前，<literal>"now"</literal>
  和其它相对时间从今天午夜起错误计算了。这和正确从当前时间起计算的其它版本不同。
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Microseconds began to be allowed, but they are ignored.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>strtotime</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>失败检查</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'Not Good';

// previous to PHP 5.1.0 you would compare with -1, instead of false
if (($timestamp = strtotime($str)) === false) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS of F Y h:i:s A', $timestamp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
   <note>
   <para>
    如果给定的年份是两位数字的格式，则其值 0-69 表示 2000-2069，70-100
    表示 1970-2000。 See the notes
    below for possible differences on 32bit systems (possible dates might end on 
    2038-01-19 03:14:07).
   </para>
  </note>
  <note>
   <para>
    有效的时间戳通常从 Fri, 13 Dec 1901 20:45:54 GMT 到
    Tue, 19 Jan 2038 03:14:07 GMT（对应于 32
    位有符号整数的最小值和最大值）。
   </para>
  <para>PHP 5.1.0 之前，不是所有的平台都支持负的时间戳，那么日记范围就被限制为不能早于
    Unix 纪元。这意味着在 1970 年 1 月 1 日之前的日期将不能用在 Windows，一些
    Linux 版本，以及几个其它的操作系统中。
   </para>
   <para>
    For 64-bit versions of PHP, the valid range of a timestamp is effectively
    infinite, as 64 bits can represent approximately 293 billion years in either
    direction.
   </para>
  </note>
  <note>
   <para>
    Dates in the <literal>m/d/y</literal> or <literal>d-m-y</literal> formats
    are disambiguated by looking at the separator between the various
    components: if the separator is a slash (<literal>/</literal>), then the
    American <literal>m/d/y</literal> is assumed; whereas if the separator is a
    dash (<literal>-</literal>) or a dot (<literal>.</literal>), then the
    European <literal>d-m-y</literal> format is assumed.
    If, however, the year is given in a two digit format and the separator is a
    dash (<literal>-</literal>, the date string is parsed as
    <literal>y-m-d</literal>.
   </para>
   <para>
    To avoid potential ambiguity, it's best to use ISO 8601
    (<literal>YYYY-MM-DD</literal>) dates or
    <methodname>DateTime::createFromFormat</methodname> when possible.
   </para>
  </note>
  <note>
   <para>
    Using this function for mathematical operations is not advisable.
    It is better to use <methodname>DateTime::add</methodname> and
    <methodname>DateTime::sub</methodname> in PHP 5.3 and later, or
    <methodname>DateTime::modify</methodname> in PHP 5.2.
   </para>
  </note>
 </refsect1>

<refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="datetime.formats">Date and Time Formats</link></member>
    <member><methodname>DateTime::createFromFormat</methodname></member>
    <member><function>checkdate</function></member>
    <member><function>strptime</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
