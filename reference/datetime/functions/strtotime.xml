<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350645 Maintainer: Avenger Status: ready -->
<!-- splitted from ./en/functions/datetime.xml, last change in rev 1.8 -->
<refentry xml:id="function.strtotime" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtotime</refname>
  <refpurpose>将任何字符串的日期时间描述解析为 Unix 时间戳</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>strtotime</methodname>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>now</parameter><initializer>time()</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   本函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为
   Unix 时间戳（自 January 1 1970 00:00:00 UTC 起的秒数），其值相对于
   <parameter>now</parameter> 参数给出的时间，如果没有提供
   <parameter>now</parameter> 参数则用系统当前时间。
  </simpara>
  <warning>
  <para>
    本函数返回的 Unix 时间戳不包含时区信息，为了实现对 "日期/时间"
    进行计算，推荐使用功能更强大的
    <classname>DateTimeImmutable</classname> 类。
   </para>
  </warning>
  <para>
    本函数将使用 <envar>TZ</envar> 环境变量（如果有的话）来计算时间戳。自
    PHP 5.1.0 起有更容易的方法来定义时区用于所有的日期／时间函数。此过程在
    <function>date_default_timezone_get</function> 函数页面中有说明。
  </para>
 </refsect1>



 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>&date.formats.parameter;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>now</parameter></term>
     <listitem>
      <para>
       用来计算返回值的时间戳。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功则返回时间戳，否则返回 &false;。在 PHP 5.1.0
   之前本函数在失败时返回 <literal>-1</literal>。
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>strtotime</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>失败检查</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'Not Good';

// PHP 5.1.0 之前的版本中和应该改成和 -1 进行比较
if (($timestamp = strtotime($str)) === false) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS of F Y h:i:s A', $timestamp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
   <note>
   <para>
    如果给定的年份是两位数字的格式，则其值 0-69 表示 2000-2069，70-100
    表示 1970-2000。 See the notes
    below for possible differences on 32bit systems (possible dates might end on 
    2038-01-19 03:14:07).
   </para>
  </note>
  <note>
   <para>
    有效的时间戳通常从 Fri, 13 Dec
    1901 20:45:54 UTC 到 Tue, 19 Jan 2038 03:14:07 UTC（对应于 32
    位有符号整数的最小值和最大值）。
   </para>
   
   <para>
    PHP 5.1.0 之前，不是所有的平台都支持负的时间戳，那么日记范围就被限制为不能早于
    Unix 纪元。这意味着在 1970 年 1 月 1 日之前的日期将不能用在 Windows，一些
    Linux 版本，以及几个其它的操作系统中。
   </para>

   <para>
    在 64 位的 PHP 版本中，时间戳的有效范围实际上是无限的，因为
    64 位可以覆盖最多
    2930 亿年的范围。
   </para>
  </note>
  <note>
   <para>
    不同的分隔符，比如 <literal>m/d/y</literal> 或 <literal>d-m-y</literal>
    会影响到解析结果：若以反斜线 (<literal>/</literal>) 为分隔，将会做为美洲日期
    <literal>m/d/y</literal> 来解析；而当分隔符为短横线 (<literal>-</literal>) 或点
    (<literal>.</literal>) 时，则将做为欧洲日期 <literal>d-m-y</literal>
    格式来解析。当年份只有两位数字，且分隔符为短横线 (<literal>-</literal>时，日期字符串将被解析为
    <literal>y-m-d</literal> 格式。
   </para>
   <para>
    为了避免潜在的歧义，最好使用 ISO 8601 标准格式
    (<literal>YYYY-MM-DD</literal>) 或
    <methodname>DateTime::createFromFormat</methodname> 来表达。
   </para>
  </note>
  <note>
   <para>
    不建议使用此函数对日期进行数学运算。在 PHP 5.3 及以后版本中，推荐使用
    <methodname>DateTime::add</methodname> 和
    <methodname>DateTime::sub</methodname> 函数，PHP 5.2 中可以使用
    <methodname>DateTime::modify</methodname>。
   </para>
  </note>
 </refsect1>

<refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="datetime.formats">日期时间格式</link></member>
    <member><methodname>DateTime::createFromFormat</methodname></member>
    <member><function>checkdate</function></member>
    <member><function>strptime</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
