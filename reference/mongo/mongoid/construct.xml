<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338645 Maintainer: daijie Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongoid.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoId::__construct</refname>
  <refpurpose>创建一个新的id</refpurpose>
 </refnamediv>

 <refsynopsisdiv role="soft-deprecation-notice">
  <sidebar>
   &mongo.alternative.method.note;
   <simplelist role="alternatives">
    <member><methodname>MongoDB\BSON\ObjectID::__construct</methodname></member>
   </simplelist>
  </sidebar>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>MongoId::__construct</methodname>
   <methodparam choice="opt"><type>string|MongoId</type><parameter>id</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>id</parameter>
     </term>
     <listitem>
      <para>
       用于 id 的一个字符串。必须为24个十六进制的字符，或者也可以是
       <classname>MongoId</classname> 实例。
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回一个新的 id。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>1.4.0</entry>
      <entry>
       传入无效字符将抛出异常
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoId::__construct</function> 例子</title>
   <para>
    这个例子展示了如何创建一个新的 id。
    这很少用到，因为在保存到数据库之前，驱动会为数组自动添加一个id。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

  $id1 = new MongoId();
  echo "$id1\n";

  $id2 = new MongoId();
  echo "$id2\n";

  ?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
49a7011a05c677b9a916612a
49a702d5450046d3d515d10d
]]>
   </screen>
  </example>
  <example>
   <title>参数的例子</title>
   <para>这个例子展示了如何使用 string 的参数来初始化一个指定值的 MongoId。</para>
   <programlisting role="php">
<![CDATA[
<?php
  $id1 = new MongoId();

  // 从 $id1 创建一个新的 MongoId
  $id2 = new MongoId("$id1");

  // 显示 $id1 和 $id2 具有相同的十六进制值
  var_dump($id1 == $id2);
  ?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoId::__toString</methodname></member>
    <member><methodname>MongoId::isvalid</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
