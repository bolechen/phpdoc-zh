<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332247 Maintainer: RyoKazama Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.command" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::command</refname>
  <refpurpose>执行一条 Mongo 指令</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::command</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   几乎所有不属于CRUD操作的事情都可以通过一条“数据库指令”完成。需要知道数据库的版本？有一条指令可以实现。需要进行一次聚合？有一条指令可以实现。想要提高日志级别？有一条指令可以实现。我想你已经领会到了。
  </para>
  <para>
   该方法等同于：
   <programlisting role="php">
<![CDATA[
<?php

public function command($data) {
    return $this->selectCollection('$cmd')->findOne($data);
}

?>
]]>
   </programlisting>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       要发送的指令
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       该参数是一个具有以下形式的关联数组：
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>，现在支持的选项有：
       <itemizedlist>
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.2.0</entry>
       <entry>
        添加 <literal>options</literal> 参数，和一个选项:<literal>"timeout"</literal>。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   返回数据库响应。每个响应都不会超过一个文档的大小，也就是不会超过16MB。
   结果文档的结构与执行的指令有关,但大部分结果都有
   <literal>ok</literal> 字段来表示成功还是失败。以及
   <literal>results</literal> 字段包含一个结果文档数组。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB::command</function> "distinct"实例</title>
   <para>
    查找一个键的所有不重复值
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(array("distinct" => "people", "key" => "age"));

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
4
22
87
   </screen>
  </example>

  <example>
   <title><function>MongoDB::command</function> "distinct"实例</title>
   <para>
    查找一个键的所有不重复值，并且这些值大于等于18
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(
    array(
        "distinct" => "people",
        "key" => "age", 
        "query" => array("age" => array('$gte' => 18))
    )
);  

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
22
87
   </screen>
  </example>

  <example>
   <title><function>MongoDB::command</function> MapReduce实例</title>
   <para>
    获取所有有type=sale这样的"event"的用户，以及他们分别有几个这样的"event"（注:此处的event是一个集合的名字）
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// sample event document
$events->insert(array("user_id" => $id, 
    "type" => $type, 
    "time" => new MongoDate(), 
    "desc" => $description));

// construct map and reduce functions
$map = new MongoCode("function() { emit(this.user_id,1); }");
$reduce = new MongoCode("function(k, vals) { ".
    "var sum = 0;".
    "for (var i in vals) {".
        "sum += vals[i];". 
    "}".
    "return sum; }");

$sales = $db->command(array(
    "mapreduce" => "events", 
    "map" => $map,
    "reduce" => $reduce,
    "query" => array("type" => "sale"),
    "out" => array("merge" => "eventCounts")));

$users = $db->selectCollection($sales['result'])->find();

foreach ($users as $user) {
    echo "{$user['_id']} had {$user['value']} sale(s).\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
User 47cc67093475061e3d9536d2 had 3 sale(s).
User 49902cde5162504500b45c2c had 14 sale(s).
User 4af467e4fd543cce7b0ea8e2 had 1 sale(s).
   </screen>
   <note>
    <title>使用 <classname>MongoCode</classname></title>
    <para>
     这个例子使用了
     <classname>MongoCode</classname>，它还可以接受一个作用域参数。然而，现在 MongoDB 还不支持在 MapReduce 中使用它，
     如果你需要在MapReduce函数里用一个客户端参数，那么你可以在使用MapReduce的时候用“optional scope”字段把它们添加到全局作用域中，参考
     <link xlink:href="&url.mongodb.dochub.mapreduce;">MapReduce文档</link> 
     来获得更多信息。
    </para>
   </note>
   <note>
    <title><literal>out</literal> 参数</title>
    <para>
     1.8.0以前，<literal>out</literal>
     参数是可选的，如果你不使用它，MapReduce的结果将被写入一个临时集合里，这个临时集合会在连接关闭后删除。
     1.8.0以后，<literal>out</literal>
     参数是必须的，参考
     <link xlink:href="&url.mongodb.dochub.mapreduce;">MapReduce documentation</link> 
     来获得更多信息。
    </para>
   </note>
  </example>

  <example>
   <title><function>MongoDB::command</function> "textSearch"实例</title>
   <para>
    在MongoDB 2.4以上版本中使用全文检索功能（之前的版本不支持全文检索）。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$d = $m->demo;
$c = $d->planets;

$c->insert(array("name" => "Mercury", "desc" => "Mercury is the smallest and closest to the Sun"));
$c->insert(array("name" => "Venus", "desc" => "Venus is the second planet from the Sun, orbiting it every 224.7 Earth days."));
$c->insert(array("name" => "Earth", "desc" => "Earth is the the densest of the eight planets in the Solar System."));
$c->insert(array("name" => "Mars", "desc" => "Mars is named after the Roman god of war."));

$c->ensureIndex(array('desc' => 'text'));

$r = $d->command(array("text" => "planets", 'search' => "sun" ));
print_r($r);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Array
(
    [queryDebugString] => sun||||||
    [language] => english
    [results] => Array
        (
            [0] => Array
                (
                    [score] => 0.625
                    [obj] => Array
                        (
                            [_id] => MongoId Object
                                (
                                    [$id] => 517549d944670a4a5cb3059a
                                )

                            [name] => Mercury
                            [desc] => Mercury is the smallest and closest to the Sun
                        )

                )

            [1] => Array
                (
                    [score] => 0.55
                    [obj] => Array
                        (
                            [_id] => MongoId Object
                                (
                                    [$id] => 517549d944670a4a5cb3059b
                                )

                            [name] => Venus
                            [desc] => Venus is the second planet from the Sun, orbiting it every 224.7 Earth days.
                        )

                )

        )

    [stats] => Array
        (
            [nscanned] => 2
            [nscannedObjects] => 0
            [n] => 2
            [nfound] => 2
            [timeMicros] => 95
        )

    [ok] => 1
)
   </screen>
  </example>

  <example>
   <title><function>MongoDB::command</function> "geoNear"实例</title>
   <para>
    这个实例说明了如何使用 geoNear 指令。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$d = $m->demo;
$c = $d->poiConcat;

$r = $d->command(array(
    'geoNear' => "poiConcat",      // 在 poiConcat 集合中
    'near' => array(-0.08, 51.48), // 搜索 51.48°N, 0.08°E 附近
    'spherical' => true,           // 启用特殊搜索
    'num' => 5,                    // 最多返回5个文档
));
print_r($r);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member><methodname>MongoCollection::findAndModify</methodname></member>
    <member><methodname>MongoCollection::group</methodname></member>
   </simplelist>
  </para>
  <para>
   MongoDB 核心文档的
   <link xlink:href="&url.mongodb.dochub.commands;">数据库指令</link>
   ，以及这些特定指令的文档
   <link xlink:href="&url.mongodb.dochub.findandmodify;">findAndModify</link>、
   <link xlink:href="&url.mongodb.dochub.getlasterror;">getLastError</link>、
   <link xlink:href="&url.mongodb.dochub.repairdatabase;">repairDatabase</link>
   （还有很多其他指令，这只是一些例子）
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
