<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331063 Maintainer: RyoKazama Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.createcollection" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::createCollection</refname>
  <refpurpose>创建一个集合</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCollection</type><methodname>MongoDB::createCollection</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   这个方法用于创建一个“有限集合”之类需要特殊参数的集合。它相当于执行
   <programlisting role="php">
<![CDATA[
<?php

$collection = $db->command(array(
    "create" => $name,
    "capped" => $options["capped"],
    "size" => $options["size"],
    "max" => $options["max"],
    "autoIndexId" => $options["autoIndexId"],
));

?>
]]>
   </programlisting>
   参考 <function>MongoDB::command</function>
   了解更多关于数据库指令的信息
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;

  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>name</parameter>
     </term>
     <listitem>
      <para>
       集合的名字
      </para>
     </listitem>
    </varlistentry>   

    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       一个数组，包含集合的选项，具有以下形式：
       <literal>array("optionname" => "optionvalue", ...)</literal>
       。支持的选项跟MongoDB服务器的版本有关。目前支持的选项有：
      </para>
      <para>
       <variablelist>
        <varlistentry>
         <term>
          <parameter>capped</parameter>
         </term>
         <listitem>
          <para>
           这个集合是否是固定大小的。
          </para>
         </listitem>
        </varlistentry>   
        <varlistentry>
         <term>
          <parameter>size</parameter>
         </term>
         <listitem>
          <para>
           如果是固定大小的，指定它的大小（字节）。
          </para>
         </listitem>
        </varlistentry>   
        <varlistentry>
         <term>
          <parameter>max</parameter>
         </term>
         <listitem>
          <para>
           如果是固定大小的，指定集合中最多存储多少个文档。
          </para>
         </listitem>
        </varlistentry>   
        <varlistentry>
         <term>
          <parameter>autoIndexId</parameter>
         </term>
         <listitem>
          <para>
           如果 capped 是 &true; 你可以显式定义为 &false; 来禁用 自增<literal>_id</literal> 特性。MongoDB 2.2以前，
           <literal>autoIndexId</literal>
           的默认值是&false;。
          </para>
         </listitem>
        </varlistentry>   
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回新建的集合对象。
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB::createCollection</function> 固定大小集合 实例</title>
   <para>
    固定大小（capped）集合是一种磁盘容量或者文档数量固定的特殊集合。当集合“满了”的时候，最老的文档就会被新文档代替。固定大小集合在类似日志记录的应用中非常有用，比如你需要保留一定量的日志，不用担心它们占用过多的空间。
   </para>
   <para>
    这个例子建立了一个非常小的日志集合，保存10条日志。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$log = $db->createCollection(
    "logger",
    array(
        'capped' => true,
        'size' => 10*1024,
        'max' => 10
    )
);

for ($i = 0; $i < 100; $i++) {
    $log->insert(array("level" => WARN, "msg" => "sample log message #$i", "ts" => new MongoDate()));
}

$msgs = $log->find();

foreach ($msgs as $msg) {
    echo $msg['msg']."\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
sample log message #90
sample log message #91
sample log message #92
sample log message #93
sample log message #94
sample log message #95
sample log message #96
sample log message #97
sample log message #98
sample log message #99
   </screen>
  </example>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.4.0</entry>
       <entry>
        <para>
         1.4.0以前的版本里，所有选项都是这个方法的参数。之前版本这个方法的签名是这样的：
        </para>
        <para>
         <methodsynopsis>
          <modifier>public</modifier> <type>MongoCollection</type><methodname>MongoDB::createCollection</methodname>
          <methodparam><type>string</type><parameter>name</parameter></methodparam>
          <methodparam choice="opt"><type>bool</type><parameter>capped</parameter><initializer>&false;</initializer></methodparam>
          <methodparam choice="opt"><type>int</type><parameter>size</parameter><initializer>0</initializer></methodparam>
          <methodparam choice="opt"><type>int</type><parameter>max</parameter><initializer>0</initializer></methodparam>
         </methodsynopsis>
        </para>
        <para>
         参数的意义与现在版本的
         <parameter>options</parameter>
         参数相同。
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
