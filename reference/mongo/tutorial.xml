<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338152 Maintainer: anonymous#29387 Status: ready -->

<chapter xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>教程</title>
 <warning>
  &mongo.deprecated.note;
 </warning>
 <para>
  这是官方的 MongoDB PHP 驱动
 </para>
 <para>这是一个示例程序，它包含 连接数据库、插入文档、查询文档、遍历查询结果、断开链接。
  实例中的每一步都有更详细的说明（注释）。
 </para>
 <example xml:id="mongo.tutorial.basics">
  <programlisting role="php">
<![CDATA[
<?php

// 链接服务器
$m = new MongoClient();

// 选择一个数据库
$db = $m->comedy;

// 选择一个集合（ Mongo 的“集合”相当于关系型数据库的“表”）
$collection = $db->cartoons;

// 插入一个文档（译注：“文档”相当于关系型数据库的“行”）
$document = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($document);

// 添加另一个文档，它的结构与之前的不同
$document = array( "title" => "XKCD", "online" => true );
$collection->insert($document);

// 查询集合中的所有文档
$cursor = $collection->find();

// 遍历查询结果
foreach ($cursor as $document) {
    echo $document["title"] . "\n";
}

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </example>


 <section xml:id="mongo.tutorial.connecting">
  <title>连接数据库</title>
  <para>
   使用下面列出的其中一种方法链接：
  </para>

  <example xml:id="mongo.tutorial.connecting-example">
   <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient(); // 连接到 localhost:27017
$connection = new MongoClient( "mongodb://example.com" ); // 连接到远程服务器 （使用默认端口： 27017）
$connection = new MongoClient( "mongodb://example.com:65432" ); // 链接到远程服务器，使用自定义的端口
?>
]]>
   </programlisting>
  </example>
  <para>
   你并不必须手动从服务器断开连接。这个驱动使用了持久连接，并会在下次试图链接到同一服务器时重用它。
  </para>
  <section xml:id="mongo.tutorial.connecting.seealso">
   <title>参见</title>
   <para>
    <link linkend="mongo.connecting">链接</link>
    中的相关章节。来获得更多链接方式的信息。
   </para>
   <para>
    <classname>MongoClient</classname> 类和
    <function>MongoClient::__construct</function>
    的文档中有对所有链接方式的详细说明，
    并且带有一些例子。
   </para>
  </section>
 </section>

  <section xml:id="mongo.tutorial.selectdb">
   <title>获取数据库实例</title>
   <para>
    要选择数据库，使用：
   </para>
   <example xml:id="mongo.tutorial.selectdb-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->dbname;
?>
]]>
    </programlisting>
   </example>
   <para>
    这个数据库不需要提前建好，当你使用它的时候，就会自动建立。
   </para>
   <para>
    要小心的是，你可能不小心建立了一个新的数据库，然后产生奇怪的错误。
    （在下面的例子中，第二次使用“同一个”数据库时 <literal>name</literal> 被错误的拼写成 <literal>anme</literal>）
    <example xml:id="mongo.tutorial.selectdb.typo">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();

$db = $connection->mybiglongdbname;
// do some stuff

$db = $connection->mybiglongdbanme;
// now connected to a different database! 注意此时选择了另一个数据库！
?>
]]>
     </programlisting>
    </example>
   </para>
   <section xml:id="mongo.tutorial.selectdb.seealso">
    <title>参见</title>
    <para>
     <classname>MongoDB</classname>
     类的文档中有对数据库对象的详细说明。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.collection">
   <title>获取集合实例</title>
   <para>
    获取一个集合的语法与获取数据库时相同：
   </para>
   <example xml:id="mongo.tutorial.collection-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->baz;

// select a collection:
$collection = $db->foobar;

// or, directly selecting a database and collection:
$collection = $connection->baz->foobar;
?>
]]>
    </programlisting>
   </example>
   <para>
    一个集合相当于一张表。（如果你对关系型数据库比较熟悉）
   </para>
   <section xml:id="mongo.tutorial.collection.seealso">
    <title>参见</title>
    <para>
     <classname>MongoCollection</classname>
     类的文档中有对集合对象的详细说明。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert">
   <title>插入一个文档</title>
   <para>
    关联数组是能插入集合的最基本结构。
    一般的“文档”结构可能是这样：
   </para>
   <example xml:id="mongo.tutorial.insert-data-example">
    <programlisting role="php">
<![CDATA[
<?php
$doc = array(
    "name" => "MongoDB",
    "type" => "database",
    "count" => 1,
    "info" => (object)array( "x" => 203, "y" => 102),
    "versions" => array("0.9.7", "0.9.8", "0.9.9")
);
?>
]]>
    </programlisting>
   </example>
   <para>
    注意：你可以嵌套数组、对象。驱动会把关联数组保存为
    js对象，从0开始的连续数字下标数组保存为
    js数组，不从0开始或有间断的（如0,1,4,5）数组保存为
    js对象。
    译注：即：只有从0开始的连续数字下标数组保存为数组，其他复杂类型均为对象。
   </para>
   <para>
    要插入这个文档，使用 <function>MongoCollection::insert</function> 方法：
   </para>
   <example xml:id="mongo.tutorial.insert-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->insert( $doc );
?>
]]>
    </programlisting>
   </example>
   <section xml:id="mongo.tutorial.insert.seealso">
    <title>参见</title>
    <para>
     <function>MongoCollection::insert</function>
     方法的文档中有对插入数据的详细说明。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.findone">
   <title>
    使用 <function>MongoCollection::findOne</function> 方法
   </title>
   <para>
    要查看我们上一步插入到数据库的文档，可以简单的使用
    <function>MongoCollection::findOne</function>
    方法从即合理获得一个简单的文档。
    这个方法在只想查询一个结果的时候很有用。
   </para>
   <example xml:id="mongo.tutorial.findone-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$document = $collection->findOne();
var_dump( $document );
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "4e2995576803fab768000000"
  }
  ["name"]=>
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array(2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]=>
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
    </screen>
   </example>
   <para>
    注意：有一个 <literal>_id</literal> 字段被自动添加到你的文档中了。
    <literal>_id</literal> 字段就是集合的“主键”。
    如果插入文档的时候你没有手动指定，驱动就会自动帮你添加一个。
   </para>
   <para>
    如果你所插入的文档定义了 <literal>_id</literal> 字段，那么它在集合中必须是唯一的。
    这是一个例子：
   </para>
   <example xml:id="mongo.tutorial.findone-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->database;

$db->foo->insert(array("_id" => 1));
// this will throw an exception
$db->foo->insert(array("_id" => 1));

// this is fine, as it is a different collection
$db->bar->insert(array("_id" => 1));
?>
]]>
    </programlisting>
   </example>
   <para>
    默认设置时，驱动会在服务器通过了写入请求后返回（译注：“通过”即如果不发生崩溃等情况，待插入的文档就一定会在随后被写入，这并不意味着数据已经写入磁盘）。你可以通过将第二个参数设为 <literal>array("w" => 0)</literal>
    来改变默认行为。此时你的插入请求会立即返回，并且不会抛出 <literal>_id</literal> 重复的异常。
   </para>
   <section xml:id="mongo.tutorial.findone.seealso">
    <title>参见</title>
    <para>
     <function>MongoCollection::findOne</function>
     方法的文档中有对查询的详细说明。
    </para>
    <para>
     唯一ID的信息查看 <classname>MongoId</classname>
    </para>
    <para>
     <link linkend="mongo.writes">写入</link> 部分更详细的说明了写操作,
     <xref linkend="mongo.writeconcerns" /> 章节深入解释了一些写操作的选项。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert.multiple">
   <title>添加多个文档</title>
   <para>
    为了观察更多查询时值得关注的事情，我们来插入很多相似的文档到同一个集合里。这些文档的结构简单的类似于：
    <literal>array( "i" => <replaceable>value</replaceable> );</literal> 。
    通过一个循环，我们可以快速插入这些文档：
   </para>
   <example xml:id="mongo.tutorial.insert.multiple-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

for ( $i = 0; $i < 100; $i++ )
{
    $collection->insert( array( 'i' => $i, "field{$i}" => $i * 2 ) );
}
?>
]]>
    </programlisting>
   </example>

   <para>
    注意：我们可以把结构（键名）不同的数组插入同一个集合。这正是我们说 MongoDB 是一个“无结构”数据库的原因。在上面的例子中，每个文档都有一个
    <literal>i</literal> 字段，但同时也有一个变化的
    <literal>field</literal> + <literal>$i</literal> 字段。
   </para>
  </section>

  <section xml:id="mongo.tutorial.counting">
   <title>计算文档数量</title>
   <para>
    现在我们的集合中有101个文档（100个循环插入的，加上一开始的一个），我们可以通过
    <function>MongoCollection::count</function> 方法检查它。
    <example xml:id="mongo.tutorial.counting-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

echo $collection->count();
?>
]]>
     </programlisting>
    </example>
    这会输出 101 。
   </para>
  </section>

  <section xml:id="mongo.tutorial.cursor">
   <title>使用游标获取所有文档</title>
   <para>
    要获得集合中的所有文档，我们需要
    <function>MongoCollection::find</function> 方法。
    find() 方法返回一个
    <classname>MongoCursor</classname>
    对象，允许我们遍历整个结果集合来读取文档。要查询所有的文档并显示它们，使用：

    <example xml:id="mongo.tutorial.cursor-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$cursor = $collection->find();
foreach ( $cursor as $id => $value )
{
    echo "$id: ";
    var_dump( $value );
}
?>
]]>
     </programlisting>
    </example>

    这样会输出整个集合中的101个文档。
    <literal>$id</literal> 是集合的 <literal>_id</literal> 字段（被转换成字符串），
    <literal>$value</literal> 是文档本身。
   </para>
   <section xml:id="mongo.tutorial.cursor.seealso">
    <title>参见</title>
    <para>
     <function>MongoCollection::find</function>
     方法的文档中有关于查询的详细信息。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.criteria">
   <title>设置查询条件</title>
   <para>
    我们可以建立一个查询，然后传递给
    <function>MongoCollection::find</function> 方法来查询集合的一个子集。
    例如：我们要查询 <literal>"i"</literal> 字段等于 <literal>71</literal>
    的文档，我们可以使用：
   </para>
   <example xml:id="mongo.tutorial.criteria-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => 71 );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
    </screen>
   </example>
  </section>

  <section xml:id="mongo.tutorial.multi.query">
   <title>获取一个子集</title>
   <para>
    我们可以用查询条件从集合中获得多个文档。
    例如：想要获得 <literal>"i"</literal> &gt; <literal>50</literal> 的文档，我们需要：
   </para>
   <example xml:id="mongo.tutorial.multi.query-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( "i" => array( '$gt' => 50 ) ); //note the single quotes around '$gt'
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </programlisting>
    <para>
     将会显示 <literal>"i"</literal> &gt; <literal>50</literal>
     的文档。也可以获得一个范围内的文档，比如
     <literal>20 &lt; i &lt;= 30</literal>：
    </para>
    <screen>
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => array( '$gt' => 20, "\$lte" => 30 ) );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </screen>
   </example>
   <para>
    要注意美元字符始终都需要转义，或者可以用单引号代替。否则 PHP 会把它解析成对应的变量 <varname>$gt</varname>。
   </para>
  </section>

  <section xml:id="mongo.tutorial.indexes">
   <title>建立索引</title>
   <para>
    MongoDB 支持索引，并且很容易给集合添加索引。你需要指定字段名和排序方向：
    升序（1）或降序（-1）。例如：
   </para>
   <example xml:id="mongo.tutorial.indexes-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->ensureIndex( array( "i" => 1 ) );  // create index on "i"
$collection->ensureIndex( array( "i" => -1, "j" => 1 ) );  // index on "i" descending, "j" ascending
?>
]]>
    </programlisting>
   </example>
   <para>
    当你的数据量变得越来越大，创建索引对读取性能有巨大的提升。如果你不了解索引，可以参考
    <function>MongoCollection::ensureIndex</function> 文档和 MongoDB 的
    <link xlink:href="&url.mongodb.dochub.indexes;">MongoDB indexing documentation</link>。
   </para>
  </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
