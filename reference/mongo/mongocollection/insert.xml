<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330300 Maintainer: daijie Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.insert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::insert</refname>
  <refpurpose>插入文档到集合中</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool|array</type><methodname>MongoCollection::insert</methodname>
   <methodparam><type>array|object</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   发送到数据库的所有字符串必须是 UTF-8 的。如果有字符串不是 UTF-8，将会抛出 
   <classname>MongoException</classname> 异常。
   要插入（或者查询）一个非 UTF-8 的字符串，请使用 <classname>MongoBinData</classname>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       一个数组或对象。如果使用的是一个对象，它不能有 protected 或
       private 的属性。
      </para>
      <note>
       <para>
        如果参数不具有 <literal>_id</literal> 键或属性，
        将会创建一个新的 <classname>MongoId</classname> 实例，并赋值给它。
        这种特殊行为不意味着参数是传引用的。
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       插入的选项。
       <itemizedlist>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
<!--
        &mongo.writes.parameters.sockettimeoutms;
-->
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeout;
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   如果设置了 <literal>"w"</literal> 选项，将会返回包含插入状态的数组。
   否则，将会返回一个 &true; 代表数组不是空的（空数组将会抛出 <classname>MongoException</classname> ）。
  </para>
  <para>
   如果返回了一个 array，将会有以下键：
   <variablelist>
    <varlistentry>
     <term>
      <parameter>ok</parameter>
     </term>
     <listitem>
      <para>
       它应该几乎总是 1（除非 last_error 本身出现错误）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>err</parameter>
     </term>
     <listitem>
      <para>
       如果这个字段不是 null，说明刚才的操作出现了错误。
       如果有这个字段，它将包含一个字符串，用于描述出现的错误信息。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>code</parameter>
     </term>
     <listitem>
      <para>
       如果发生了一个数据库错误，相应的错误码会传到客户端。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>errmsg</parameter>
     </term>
     <listitem>
      <para>
       如果数据库命令出现了错误，将会设置这个字段。同时 <literal>ok</literal> 也会是 0.
       例如，设置了 <literal>w</literal> 并且超时了，errmsg 将会是 "timed
       out waiting for slaves" 并且 <literal>ok</literal> 是 0。
       如果设置了这个字段，它会是发生的错误的字符串描述。 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>n</parameter>
     </term>
     <listitem>
      <para>
       如果最后的操作是插入、更新或删除，将会返回受影响的对象数量。对于插入操作，这个值总是 <literal>0</literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtimeout</parameter>
     </term>
     <listitem>
      <para>
       等待复制直到超时的时间。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>waited</parameter>
     </term>
     <listitem>
      <para>
       在超时前，要等待操作多久。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>wtime</parameter>
     </term>
     <listitem>
      <para>
       如果设置了 <literal>w</literal> 并且操作成功了，等到复制到 <literal>w</literal> 台服务器的时间。 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>upserted</parameter>
     </term>
     <listitem>
      <para>
       如果发生了一次 upsert，这个字段将会包含新记录的
       <literal>_id</literal>。
       对于 upsert，不管是该字段还是
       <literal>updatedExisting</literal> 都会被保留（除非发生了一个错误）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>updatedExisting</parameter>
     </term>
     <listitem>
      <para>
       如果一个 upsert 更新了一个存在的元素，这个字段将会是 true。
       对于 upsert，无论是这个字段 还是 upserted 都会被保留（除非发生了错误）。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   如果插入的文档是空的，或者包含零长度的键，将会抛出 <classname>MongoException</classname>。
   尝试插入包含 protected 和 private 属性的对象将会导致零长度键（zero-length key）的错误。
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      
<!--
      <row>
       <entry>1.5.0</entry>
       <entry>Renamed the <literal>"timeout"</literal> option to
       <literal>"socketTimeoutMS"</literal>.</entry>
      </row>
-->
      <row>
       <entry>1.3.0</entry>
       <entry>
        <parameter>options</parameter> 参数不再接受 boolean 来标识一个确认的写入。
        现在，你可以通过
        <literal>array('w' => 1)</literal> 设置（
        <classname>MongoClient</classname> 默认的行为）
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>增加了 <literal>"timeout"</literal> 选项。</entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        如果设置了 <literal>"safe"</literal>，出现 "not master" 错误时断开连接。
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        <para>
         <literal>"safe"</literal> 选项接受 integer 值，之前只接受 boolean 值。
        </para>
        <para>
         增加 <literal>"fsync"</literal> 选项。
        </para>
        <para>
         如果设置了 <literal>"safe"</literal> 选项，返回类型改成包含错误信息的 array。
         否则，和之前一样返回 boolean。
        </para>
       </entry>
      </row>
      <row>
       <entry>1.0.5</entry>
       <entry>
        修改第二个参数为选项数组。在 1.0.5 之前，第二个参数是 boolean，指示 <literal>"safe"</literal> 选项。
       </entry>
      </row>
      <row>
       <entry>1.0.1</entry>
       <entry>
        如果设置了 <literal>"safe"</literal> 选项并且插入失败了，将会抛出 <classname>MongoCursorException</classname>。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::insert</function> <literal>_id</literal> 例子</title>
   <para>
    如果没有 <literal>_id</literal>，则会添加一个到插入的文档中。
    基于参数传入的方式，在调用代码时可能无法产生有效
    <literal>_id</literal>。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$collection = $m->selectCollection('test', 'phpmanual');
// 如果使用的是 array 字面语法，将无法成功生成 _id
$collection->insert(array('x' => 1));

// 通过传 array 的变量可以生成 _id
$a = array('x' => 2);
$collection->insert($a);
var_dump($a);

// 通过传引用的 array 无法生成 _id
$b = array('x' => 3);
$ref = &$b;
$collection->insert($ref);
var_dump($ref);

// 没有在包裹的函数中触发 copy-on-write 时 _id 有效
function insert_no_cow($collection, $document)
{
    $collection->insert($document);
}

$c = array('x' => 4);
insert_no_cow($collection, $c);
var_dump($c);

// 在包裹的函数中触发 copy-on-write 时 _id 无效
function insert_cow($collection, $document)
{
    $document['y'] = 1;
    $collection->insert($document);
}

$d = array('x' => 5);
insert_cow($collection, $d);
var_dump($d);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(2) {
  ["x"]=>
  int(2)
  ["_id"]=>
  object(MongoId)#4 (0) {
  }
}
array(1) {
  ["x"]=>
  int(3)
}
array(2) {
  ["x"]=>
  int(4)
  ["_id"]=>
  object(MongoId)#5 (0) {
  }
}
array(1) {
  ["x"]=>
  int(5)
}
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::insert</function> 确认写入的例子</title>
   <para>
    这个例子显示了设置了 <parameter>w</parameter> 后，插入两个具有相同 _id 的元素时，导致抛出 <classname>MongoCursorException</classname> 的例子。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$person = array("name" => "Joe", "age" => 20);
$collection->insert($person);

// 现在 $person 具有一个 _id 字段，所以我们再次 
// 保存它的时候，将会得到一个异常
try {
    $collection->insert($person, array("w" => 1));
} catch(MongoCursorException $e) {
    echo "Can't save the same person twice!\n";
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::batchInsert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>MongoDB <link xlink:href="&url.mongodb.dochub.insert;">insert</link> 的核心文档。</member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
