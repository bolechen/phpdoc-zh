<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 304196 Maintainer: dallas Status: ready -->
<!-- Reviewed: yes Maintainer: dallas -->
<refentry xml:id="function.curl-multi-exec" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>curl_multi_exec</refname>
  <refpurpose>运行当前 cURL 句柄的子连接</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>curl_multi_exec</methodname>
   <methodparam><type>resource</type><parameter>mh</parameter></methodparam>
   <methodparam><type>int</type><parameter role="reference">still_running</parameter></methodparam>
  </methodsynopsis>
  <para>
   处理在栈中的每一个句柄。无论该句柄需要读取或写入数据都可调用此方法。
  </para> 
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &curl.mh.description;
    <varlistentry>
     <term><parameter>still_running</parameter></term>
     <listitem>
      <para>
       一个用来判断操作是否仍在执行的标识的引用。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   一个定义于 cURL <link linkend="curl.constants">预定义常量</link>中的 cURL 代码。
  </para>
  <note>
   <para>
    该函数仅返回关于整个批处理栈相关的错误。即使返回
    <constant>CURLM_OK</constant> 时单个传输仍可能有问题。
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>curl_multi_exec</function> example</title>
    <para>
     这个范例将会创建 2 个 cURL 句柄，把它们加到批处理句柄，然后并行地运行它们。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// 创建一对cURL资源
$ch1 = curl_init();
$ch2 = curl_init();

// 设置URL和相应的选项
curl_setopt($ch1, CURLOPT_URL, "http://lxr.php.net/");
curl_setopt($ch1, CURLOPT_HEADER, 0);
curl_setopt($ch2, CURLOPT_URL, "http://www.php.net/");
curl_setopt($ch2, CURLOPT_HEADER, 0);

// 创建批处理cURL句柄
$mh = curl_multi_init();

// 增加2个句柄
curl_multi_add_handle($mh,$ch1);
curl_multi_add_handle($mh,$ch2);

$active = null;
// 执行批处理句柄
do {
    $mrc = curl_multi_exec($mh, $active);
} while ($mrc == CURLM_CALL_MULTI_PERFORM);

while ($active && $mrc == CURLM_OK) {
    if (curl_multi_select($mh) != -1) {
        do {
            $mrc = curl_multi_exec($mh, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
}

// 关闭全部句柄
curl_multi_remove_handle($mh, $ch1);
curl_multi_remove_handle($mh, $ch2);
curl_multi_close($mh);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>curl_multi_init</function></member>
    <member><function>curl_multi_select</function></member>
    <member><function>curl_exec</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->