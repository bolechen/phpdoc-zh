<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 348203 Maintainer: yuanyuqiang Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="opcache.configuration" xmlns="http://docbook.org/ns/docbook">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  <table>
   <title>OPcache 配置选项</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>&Name;</entry>
      <entry>&Default;</entry>
      <entry>&Changeable;</entry>
      <entry>&Changelog;</entry>
     </row>
    </thead>
    <tbody xml:id="opcache.configuration.list">
     <row>
      <entry><link linkend="ini.opcache.enable">opcache.enable</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.enable-cli">opcache.enable_cli</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>在 PHP 7.1.2 至 7.1.6 （含）的版本，默认值是"1"</entry>
     </row>
     <row>
      <entry><link
      linkend="ini.opcache.memory-consumption">opcache.memory_consumption</link></entry>
      <entry>"128"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>在 PHP 7.0.0 之前，默认值是 "64"</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.interned-strings-buffer">opcache.interned_strings_buffer</link></entry>
      <entry>"8"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>在 PHP 7.0.0 之前，默认值是 "4"</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.max-accelerated-files">opcache.max_accelerated_files</link></entry>
      <entry>"10000"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>在 PHP 7.0.0 之前，默认值是 "2000"</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.max-wasted-percentage">opcache.max_wasted_percentage</link></entry>
      <entry>"5"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.use-cwd">opcache.use_cwd</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.validate-timestamps">opcache.validate_timestamps</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.revalidate-freq">opcache.revalidate_freq</link></entry>
      <entry>"2"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.revalidate-path">opcache.revalidate_path</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.save-comments">opcache.save_comments</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.load-comments">opcache.load_comments</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>从 PHP 7.0.0 开始被移除</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.fast-shutdown">opcache.fast_shutdown</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.2.0 开始被移除</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.enable-file-override">opcache.enable_file_override</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.optimization-level">opcache.optimization_level</link></entry>
      <entry>"0x7FFFBFFF"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 5.6.18 开始，默认值从 0xFFFFFFFF 修改为 0x7FFFBFFF</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.inherited-hack">opcache.inherited_hack</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>自 PHP 7.3.0 被移除</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.dups-fix">opcache.dups_fix</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.blacklist-filename">opcache.blacklist_filename</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.max-file-size">opcache.max_file_size</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.consistency-checks">opcache.consistency_checks</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.force-restart-timeout">opcache.force_restart_timeout</link></entry>
      <entry>"180"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.error-log">opcache.error_log</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.log-verbosity-level">opcache.log_verbosity_level</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.preferred-memory-model">opcache.preferred_memory_model</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.protect-memory">opcache.protect_memory</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.mmap-base">opcache.mmap_base</link></entry>
      <entry>&null;</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.restrict-api">opcache.restrict_api</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.file_update_protection">opcache.file_update_protection</link></entry>
      <entry>"2"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.huge_code_pages">opcache.huge_code_pages</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.lockfile_path">opcache.lockfile_path</link></entry>
      <entry>"/tmp"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.opt_debug_level">opcache.opt_debug_level</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.file-cache">opcache.file_cache</link></entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.0 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.file-cache-only">opcache.file_cache_only</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.0 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.file-cache-consistency-checks">opcache.file_cache_consistency_checks</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.0 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.file-cache-fallback">opcache.file_cache_fallback</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.0 开始支持，仅适用于 Windows 平台</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.validate-permission">opcache.validate_permission</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.14 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.validate-root">opcache.validate_root</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.0.14 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.preload">opcache.preload</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.4.0 开始支持</entry>
     </row>
     <row>
      <entry><link linkend="ini.opcache.preload-user">opcache.preload_user</link></entry>
      <entry>""</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>从 PHP 7.4.0 开始支持</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  &ini.php.constants;
 </para>
 
 &ini.descriptions.title;
 
 <para>
  <variablelist>
   <varlistentry xml:id="ini.opcache.enable">
    <term>
     <parameter>opcache.enable</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      启用操作码缓存。如果禁用此选项，则不会优化和缓存代码。
      在运行期使用 <function>ini_set</function> 函数只能禁用
      <literal>opcache.enable</literal> 设置，不可以启用此设置。
      如果在脚本中尝试启用此设置项会产生警告。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.enable-cli">
    <term>
     <parameter>opcache.enable_cli</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      仅针对 CLI 版本的 PHP 启用操作码缓存。
      通常被用来测试和调试。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.memory-consumption">
    <term>
     <parameter>opcache.memory_consumption</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      OPcache 的共享内存大小，以兆字节为单位。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.interned-strings-buffer">
    <term>
     <parameter>opcache.interned_strings_buffer</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      用来存储预留字符串的内存大小，以兆字节为单位。
      PHP 5.3.0 之前的版本会忽略此配置指令。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.max-accelerated-files">
    <term>
     <parameter>opcache.max_accelerated_files</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      OPcache 哈希表中可存储的脚本文件数量上限。
      真实的取值是在质数集合
      <literal>{ 223, 463, 983, 1979, 3907, 7963, 16229, 32531, 65407, 130987 }</literal>
      中找到的第一个大于等于设置值的质数。
      设置值取值范围最小值是 200，最大值在 PHP 5.5.6 之前是 100000，PHP 5.5.6 及之后是 1000000。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.max-wasted-percentage">
    <term>
     <parameter>opcache.max_wasted_percentage</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      浪费内存的上限，以百分比计。
      如果达到此上限，那么 OPcache 将产生重新启动续发事件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.use-cwd">
    <term>
     <parameter>opcache.use_cwd</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果启用，OPcache 将在哈希表的脚本键之后附加改脚本的工作目录，
      以避免同名脚本冲突的问题。
      禁用此选项可以提高性能，但是可能会导致应用崩溃。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.validate-timestamps">
    <term>
     <parameter>opcache.validate_timestamps</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果启用，那么 OPcache 会每隔 <link linkend="ini.opcache.revalidate-freq">opcache.revalidate_freq</link> 设定的秒数
      检查脚本是否更新。
      如果禁用此选项，你必须使用 <function>opcache_reset</function> 或者
      <function>opcache_invalidate</function> 函数来手动重置 OPcache，也可以
      通过重启 Web 服务器来使文件系统更改生效。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.revalidate-freq">
    <term>
     <parameter>opcache.revalidate_freq</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      检查脚本时间戳是否有更新的周期，以秒为单位。
      设置为 <literal>0</literal> 会导致针对每个请求， OPcache 都会检查脚本更新。
     </para>
     <para>
      如果
      <link linkend="ini.opcache.validate-timestamps">opcache.validate_timestamps</link>
      配置指令设置为禁用，那么此设置项将会被忽略。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.revalidate-path">
    <term>
     <parameter>opcache.revalidate_path</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果禁用此选项，在同一个 <link linkend="ini.include-path">include_path</link>
      已存在的缓存文件会被重用。
      因此，将无法找到不在包含路径下的同名文件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.save-comments">
    <term>
     <parameter>opcache.save_comments</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果禁用，脚本文件中的注释内容将不会被包含到操作码缓存文件，
      这样可以有效减小优化后的文件体积。
      禁用此配置指令可能会导致一些依赖注释或注解的
      应用或框架无法正常工作，
      比如： Doctrine， Zend Framework 2 以及 PHPUnit。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.load-comments">
    <term>
     <parameter>opcache.load_comments</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果禁用，则即使文件中包含注释，也不会加载这些注释内容。
      本选项可以和 <link linkend="ini.opcache.save-comments">opcache.save_comments</link> 
      一起使用，以实现按需加载注释内容。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.fast-shutdown">
    <term>
     <parameter>opcache.fast_shutdown</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果启用，则会使用快速停止续发事件。
      所谓快速停止续发事件是指依赖 Zend 引擎的内存管理模块
      一次释放全部请求变量的内存，而不是依次释放每一个已分配的内存块。
     </para>
     <para>
      从 PHP 7.2.0 开始，此配置指令被移除。
      快速停止的续发事件的处理已经集成到 PHP 中，
      只要有可能，PHP 会自动处理这些续发事件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.enable-file-override">
    <term>
     <parameter>opcache.enable_file_override</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      如果启用，则在调用函数 <function>file_exists</function>，
      <function>is_file</function> 以及 <function>is_readable</function> 的时候，
      都会检查操作码缓存，无论文件是否已经被缓存。
      如果应用中包含检查 PHP 脚本存在性和可读性的功能，这样可以提升性能。
      但是如果禁用了 <link linkend="ini.opcache.validate-timestamps">opcache.validate_timestamps</link> 选项，
      可能存在返回过时数据的风险。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.optimization-level">
    <term>
     <parameter>opcache.optimization_level</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      控制优化级别的二进制位掩码。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.inherited-hack">
    <term>
     <parameter>opcache.inherited_hack</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      在 PHP 5.3 之前的版本，OPcache 会存储代码中使用
      <link linkend="internals2.opcodes.declare-class">DECLARE_CLASS</link> 操作码
      来实现继承的位置。当文件被加载之后，OPcache 会尝试使用当前环境来绑定被继承的类。
      由于当前脚本中可能并不需要 DECLARE_CLASS 操作码，如果这样的脚本需要对应的操作码被定义时，
      可能无法运行。
      <!--
      In PHP &lt; 5.3, OPcache stores the places where
      <link linkend="internals2.opcodes.declare-class">DECLARE_CLASS</link>
      opcodes used inheritance; when the file is loaded, OPcache then tries to
      bind the inherited classes using the current environment. The problem is
      that while the DECLARE_CLASS opcode may not be needed for the current
      script, if the script requires that the opcode be defined, it may not
      run.-->
     </para>
     <para>
      在 PHP 5.3 及后续版本中，此配置指令会被忽略。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.dups-fix">
    <term>
     <parameter>opcache.dups_fix</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      仅作为针对 “不可重定义类”错误的一种解决方案。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.blacklist-filename">
    <term>
     <parameter>opcache.blacklist_filename</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      OPcache 黑名单文件位置。
      黑名单文件为文本文件，包含了不进行预编译优化的文件名，每行一个文件名。
      黑名单中的文件名可以使用通配符，也可以使用前缀。
      此文件中以分号（;）开头的行将被视为注释。
     </para>
     <para>
      简单的黑名单文件可能如下所示：
     </para>
     <informalexample>
      <programlisting>
<![CDATA[
; 将特定文件加入到黑名单
/var/www/broken.php
; 以字符 x 文件打头的文件
/var/www/x
; 通配符匹配
/var/www/*-broken.php
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.max-file-size">
    <term>
     <parameter>opcache.max_file_size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      以字节为单位的缓存的文件大小上限。设置为
      <literal>0</literal> 表示缓存全部文件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.consistency-checks">
    <term>
     <parameter>opcache.consistency_checks</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      如果是非 0 值，OPcache 将会每隔 N 次请求检查缓存校验和。
      N 即为此配置指令的设置值。
      由于此选项对于性能有较大影响，请尽在调试环境使用。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.force-restart-timeout">
    <term>
     <parameter>opcache.force_restart_timeout</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      如果缓存处于非激活状态，等待多少秒之后计划重启。
      如果超出了设定时间，则 OPcache 模块将杀除持有缓存锁的进程，
      并进行重启。
     </para>
     <para>
      如果选项
      <link linkend="ini.opcache.log-verbosity-level">opcache.log_verbosity_level</link>
      设置为 2 或者 2 以上的数值，当发生重启时将在日志中记录一条警告信息。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.error-log">
    <term>
     <parameter>opcache.error_log</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      OPcache 模块的错误日志文件。
      如果留空，则视为 <literal>stderr</literal>，
      错误日志将被送往标准错误输出 （通常情况下是 Web 服务器的错误日志文件）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.log-verbosity-level">
    <term>
     <parameter>opcache.log_verbosity_level</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      OPcache 模块的日志级别。
      默认情况下，仅有致命级别（0）及错误级别（1）的日志会被记录。
      其他可用的级别有：警告（2），信息（3）和调试（4）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.preferred-memory-model">
    <term>
     <parameter>opcache.preferred_memory_model</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      OPcache 首选的内存模块。
      如果留空，OPcache 会选择适用的模块，
      通常情况下，自动选择就可以满足需求。
     </para>
     <para>
      可选值包括： <literal>mmap</literal>，<literal>shm</literal>,
      <literal>posix</literal> 以及 <literal>win32</literal>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.protect-memory">
    <term>
     <parameter>opcache.protect_memory</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      保护共享内存，以避免执行脚本时发生非预期的写入。
      仅用于内部调试。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.mmap-base">
    <term>
     <parameter>opcache.mmap_base</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      在 Windows 平台上共享内存段的基地址。
      所有的 PHP 进程都将共享内存映射到同样的地址空间。
      使用此配置指令避免“无法重新附加到基地址”的错误。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.restrict-api">
    <term>
     <parameter>opcache.restrict_api</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      仅允许路径是以指定字符串开始的 PHP 脚本调用 OPcache API 函数。
      默认值为空字符串 ""，表示不做限制。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.file_update_protection">
    <term>
     <parameter>opcache.file_update_protection</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      如果文件的最后修改时间距现在不足此项配置指令所设定的秒数，那么这个文件不会进入到缓存中。
      这是为了防止尚未完全修改完毕的文件进入到缓存。
      如果你的应用中不存在部分修改文件的情况，把此项设置为 0 可以提高性能。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.huge_code_pages">
    <term>
     <parameter>opcache.huge_code_pages</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      启用或者禁用将 PHP 代码（文本段）拷贝到 HUGE PAGES 中。
      此项配置指令可以提高性能，但是需要在 OS 层面进行对应的配置。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.lockfile_path">
    <term>
     <parameter>opcache.lockfile_path</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      用来存储共享锁文件的绝对路径（仅适用于 *nix 操作系统）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.opt_debug_level">
    <term>
     <parameter>opcache.opt_debug_level</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      出于对不同阶段的优化情况进行调试的目的，生成操作码转储。
      设置为 0x10000 会在进行优化之前输出编译器编译后的操作码，
      设置为 0x20000 会输出优化后的操作码。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.file-cache">
    <term>
     <parameter>opcache.file_cache</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      配置二级缓存目录并启用二级缓存。
      启用二级缓存可以在 SHM 内存满了、服务器重启或者重置 SHM 的时候提高性能。
      默认值为空字符串 ""，表示禁用基于文件的缓存。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.file-cache-only">
    <term>
     <parameter>opcache.file_cache_only</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      启用或禁用在共享内存中的 opcode 缓存。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.file-cache-consistency-checks">
    <term>
     <parameter>opcache.file_cache_consistency_checks</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      当从文件缓存中加载脚本的时候，是否对文件的校验和进行验证。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.file-cache-fallback">
    <term>
     <parameter>opcache.file_cache_fallback</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      在 Windows 平台上，当一个进程无法附加到共享内存的时候，
      使用基于文件的缓存，也即：opcache.file_cache_only=1。
      需要显示的启用文件缓存。
     </para>
     <caution>
      <simpara>
       不鼓励禁用此配置项，
       禁用它可能会导致进程无法启动。
      </simpara>
     </caution>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.validate-permission">
    <term>
     <parameter>opcache.validate_permission</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      针对当前用户，验证缓存文件的访问权限。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.validate-root">
    <term>
     <parameter>opcache.validate_root</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      在 chroot 的环境中避免命名冲突。
      为了防止进程访问到 chroot 环境之外的文件，应该在 chroot 的情况下启用这个选项。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.preload">
    <term>
     <parameter>opcache.preload</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      指定要在服务器启动时期进行编译和缓存的 PHP 脚本文件，
      这些文件也可能通过 <function>include</function> 或者 <function>opcache_compile_file</function> 函数
      来预加载其他文件。
      所有这些文件中包含的实体，包括函数、类等，在服务器启动的时候就被加载和缓存，
      对于用户代码来讲是“开箱可用”的。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.opcache.preload-user">
    <term>
     <parameter>opcache.preload_user</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      考虑到安全因素，禁止以 root 用户预加载代码。该指令方便以其他用户预加载。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
