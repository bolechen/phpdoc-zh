<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332644 Maintainer: duanxiaoqiang Status: ready -->
<!-- Reviewed: no -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.openssl-verify">
 <refnamediv>
  <refname>openssl_verify</refname>
  <refpurpose>验证签名</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>openssl_verify</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter>signature</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>pub_key_id</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>signature_alg</parameter><initializer>OPENSSL_ALGO_SHA1</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_verify</function> 使用与<parameter>pub_key_id</parameter>关联的公钥验证指定数据<parameter>data</parameter>的签名<parameter>signature</parameter>是否正确。这必须是与用于签名的私钥相对应的公钥。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       以前用来生成签名的数据字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature</parameter></term>
     <listitem>
      <para>
       原始二进制字符串，通过<function>openssl_sign</function>或类似的函数生成。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pub_key_id</parameter></term>
     <listitem>
      <para>
       <type>resource</type> - 一个密钥, 通过 <function>openssl_get_publickey</function> 函数返回。
      </para>
      <para>
       <type>string</type> - 一个 PEM 格式的密钥, 比如, "-----BEGIN PUBLIC KEY-----
MIIBCgK..."
      </para>     
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature_alg</parameter></term>
     <listitem>
      <para>
       <type>int</type> - 以下签名算法之一<link linkend="openssl.signature-algos">Signature Algorithms</link>.
      </para>
      <para>
       <type>string</type> - 由<function>openssl_get_md_methods</function>函数返回的可用字符串，比如， "sha1WithRSAEncryption" 或者 "sha512".
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   如果签名正确返回 1, 签名错误返回 0, 内部发生错误则返回-1.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        添加了 <parameter>signature_alg</parameter> 参数。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>openssl_verify</function> 范例：</title>
    <programlisting role="php">
<![CDATA[
<?php
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo "good";
} elseif ($ok == 0) {
    echo "bad";
} else {
    echo "ugly, error checking signature";
}
// free the key from memory
openssl_free_key($pubkeyid);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>openssl_verify</function> 范例：</title>
    <programlisting role="php">
<![CDATA[
<?php
//data you want to sign
$data = 'my data';

//create new private and public key
$private_key_res = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));
$details = openssl_pkey_get_details($private_key_res);
$public_key_res = openssl_pkey_get_public($details['key']);

//create signature
openssl_sign($data, $signature, $private_key_res, "sha1WithRSAEncryption");

//verify signature
$ok = openssl_verify($data, $signature, $public_key_res, OPENSSL_ALGO_SHA1);
if ($ok == 1) {
    echo "valid";
} elseif ($ok == 0) {
    echo "invalid";
} else {
    echo "error: ".openssl_error_string();
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_sign</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
