<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 340219 Maintainer: daijie Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mb-strcut" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mb_strcut</refname>
  <refpurpose>获取字符的一部分</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
<methodsynopsis>
   <type>string</type><methodname>mb_strcut</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam><type>int</type><parameter>start</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>NULL</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>encoding</parameter><initializer>mb_internal_encoding()</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>mb_strcut</function> 和 <function>mb_substr</function> 类似，都是从字符串中提取子字符串，但是按字节数来执行，而不是字符个数。
   如果截断位置位于多字节字符两个字节的中间，将于该字符的第一个字节开始执行。
   这也是和 <function>substr</function> 函数的不同之处，后者简单地将字符串在字节之间截断，这将导致一个畸形的字节序列。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       要截断的 <type>string</type>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
        如果 <parameter>start</parameter> 不是负数，返回的字符串会从 <parameter>str</parameter> 的第 <parameter>start</parameter> <emphasis>字节</emphasis>位置开始，从 0 开始计数。举个例子，字符串 '<literal>abcdef</literal>'，字节位置 <literal>0</literal> 的字符是 '<literal>a</literal>'，字节位置 <literal>2</literal> 的字符是
       '<literal>c</literal>'，以此类推。
      </para>
      <para>
       如果 <parameter>start</parameter> 是负数，返回的字符串是从 <parameter>str</parameter> 末尾处第 <parameter>start</parameter> 个字节开始的。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       <emphasis>字节</emphasis>长度。If omitted or <literal>NULL</literal>
       is passed, extract all bytes to the end of the string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>encoding</parameter></term>
     <listitem>
      &mbstring.encoding.parameter;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>mb_strcut</function> 根据 <parameter>start</parameter> 和 <parameter>length</parameter> 参数返回 <parameter>str</parameter> 的一部分。
  </para>
 </refsect1>
 
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.8</entry>
       <entry>
        Passing <literal>NULL</literal> as <parameter>length</parameter>
        extracts all bytes to the end of the string. Prior to this version
        <literal>NULL</literal> was treated the same as <literal>0</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mb_substr</function></member>
    <member><function>mb_internal_encoding</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
