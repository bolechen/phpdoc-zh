<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 297028 Maintainer: dallas Status: ready -->
<refentry xml:id="function.tempnam" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>tempnam</refname>
  <refpurpose>建立一个具有唯一文件名的文件</refpurpose>
 </refnamediv>
 
  <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>tempnam</methodname>
   <methodparam><type>string</type><parameter>dir</parameter></methodparam>
   <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
  </methodsynopsis>
  <para>
   在指定目录中建立一个具有唯一文件名的文件。如果该目录不存在，<function>tempnam</function>
   会在系统临时目录中生成一个文件，并返回其文件名。
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dir</parameter></term>
     <listitem>
      <para>
       The directory where the temporary filename will be created.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       产生临时文件的前缀。
      </para>
      <note>
       <simpara>
        Windows uses only the first three characters of prefix.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
  <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回新的临时文件名，出错返回 &false;。
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.6</entry>
       <entry>
        在 PHP 4.0.6 之前，<function>tempnam</function>
        函数的行为取决于系统。在 Windows 下 <varname>TMP</varname>
   环境变量会越过 <parameter>dir</parameter>
        参数，在 Linux 下 <varname>TMPDIR</varname>
   环境变量优先，而在 SVR4 下总是使用 <parameter>dir</parameter>
   参数，如果其指向的目录存在的话。如果有疑问请参考系统文档中的
   tempnam(3) 函数。
       </entry>
      </row>
      <row>
       <entry>4.0.3</entry>
       <entry>
        本函数的行为在 4.0.3 版中改变了。也会建立一个临时文件以避免竞争情形，即有可能会在产生出作为文件名的字符串与脚本真正建立该文件之间会在文件系统中存在同名文件。注意，如果不再需要该文件则要删除此文件，不会自动删除的。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
  <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>tempnam</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$tmpfname = tempnam("/tmp", "FOO");

$handle = fopen($tmpfname, "w");
fwrite($handle, "writing to tempfile");
fclose($handle);

// do here something

unlink($tmpfname);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
  <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    如果 PHP 不能在指定的 <parameter>dir</parameter>
    参数中创建文件，则退回到系统默认值。
    在 NTFS 文件系统中，同样的情况也发生在 <parameter>dir</parameter> 中文件数超过 65534 个的时候。
   </simpara>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>tmpfile</function></member>
    <member><function>sys_get_temp_dir</function></member>
    <member><function>unlink</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
