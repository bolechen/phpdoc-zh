<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324378 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<!-- CREDITS: lm92 -->
<refentry xml:id="function.flock" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>轻便的咨询文件锁定</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">wouldblock</parameter></methodparam>
  </methodsynopsis>
    <para>
     <function>flock</function> 允许执行一个简单的可以在任何平台中使用的读取/写入模型（包括大部分的
   Unix 派生版和甚至是 Windows）。
  </para>
    <para>
     在 PHP 5.3.2版本之前，锁也会被 <function>fclose</function> 释放（在脚本结束后会自动调用）。
  </para>
  <para>
   PHP 支持以咨询方式（也就是说所有访问程序必须使用同一方式锁定, 否则它不会工作）锁定全部文件的一种轻便方法。
    默认情况下，这个函数会阻塞到获取锁；这可以通过下面文档中 <constant>LOCK_NB</constant> 选项来控制（在非 Windows 平台上）。
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>handle</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter>
   可以是以下值之一：
       <itemizedlist>
        <listitem>
         <simpara>
         <constant>LOCK_SH</constant>取得共享锁定（读取的程序）。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
         <constant>LOCK_EX</constant> 取得独占锁定（写入的程序。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_UN</constant> 释放锁定（无论共享或独占）。
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       如果不希望 <function>flock</function> 在锁定时堵塞，则是
       <constant>LOCK_NB</constant>（Windows 上还不支持）。

      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>wouldblock</parameter></term>
     <listitem>
      <para>
       如果锁定会堵塞的话（EWOULDBLOCK
   错误码情况下），可选的第三个参数会被设置为 &true;。（Windows 上不支持）
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.2</entry>
       <entry>
        在文件资源句柄关闭时不再自动解锁。现在要解锁必须手动进行。
       </entry>
      </row>
      <row>
       <entry>4.0.1</entry>
       <entry>
        增加了常量 <literal>LOCK_XXX</literal>。
        之前你必须使用 1 代表 <constant>LOCK_SH</constant>，2 代表
        <constant>LOCK_EX</constant>，3 代表<constant>LOCK_UN</constant>，4 代表
         <constant>LOCK_NB</constant>。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>flock</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) {  // 进行排它型锁定
    ftruncate($fp, 0);      // truncate file
    fwrite($fp, "Write something here\n");
    fflush($fp);            // flush output before releasing the lock
    flock($fp, LOCK_UN);    // 释放锁定
} else {
    echo "Couldn't get the lock!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>flock</function> 使用 <constant>LOCK_NB</constant> 选项</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* Activate the LOCK_NB option on an LOCK_EX operation */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Unable to obtain lock';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> uses mandatory locking instead of advisory
    locking on Windows. Mandatory locking is also supported on Linux and
    System V based operating systems via the usual mechanism supported by the
    fcntl() system call: that is, if the file in question has the setgid
    permission bit set and the group execution bit cleared. On Linux, the file
    system will also need to be mounted with the mand option for this to work.
   </para>
  </note>
  <note>
   <para>
    由于 <function>flock</function>
    需要一个文件指针， 因此可能不得不用一个特殊的锁定文件来保护打算通过写模式打开的文件的访问（在
    <function>fopen</function> 函数中加入 "w" 或 "w+"）。
   </para>
  </note>
  <note>
   <para>
    May only be used on file pointers returned by <function>fopen</function>
    for local files, or file pointers pointing to userspace streams that
    implement the <function>streamWrapper::stream_lock</function> method.
   </para>
  </note>
  <warning>
   <para>
    Assigning another value to <parameter>handle</parameter> argument in
    subsequent code will release the lock.
   </para>
  </warning>
  <warning>
   <para>
    在部分操作系统中 <function>flock</function> 以进程级实现。当用一个多线程服务器
    API（比如 ISAPI）时，可能不可以依靠
    <function>flock</function> 来保护文件，因为运行于同一服务器实例中其它并行线程的
    PHP 脚本可以对该文件进行处理。
   </para>
   <para>
    <function>flock</function> 不支持旧的文件系统，如 <literal>FAT</literal>
    以及它的派生系统。因此，此环境下总是返回 &false;（尤其是对 Windows 98 用户来说）。
   </para>
  </warning>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
