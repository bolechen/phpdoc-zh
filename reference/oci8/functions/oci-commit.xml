<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<!-- CREDITS: dallas -->
<refentry xml:id="function.oci-commit" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_commit</refname>
  <refpurpose>提交未执行的事务处理</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_commit</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>oci_commit</function> 将 Oracle 连接 <parameter>connection</parameter>
   上正在运行的事务中所有未执行的语句提交处理。
  </para>
  <para>
   <example>
    <title><function>oci_commit</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
    // Login to Oracle server
    $conn = oci_connect('scott', 'tiger');

    // Parse SQL
    $stmt = oci_parse($conn, "
                              INSERT INTO
                                         employees (name, surname)
                                   VALUES
                                         ('Maxim', 'Maletsky')
                             ");

    /* Execute statement
       OCI_DEFAULT tells oci_execute()
       not to commit statement immediately */
    oci_execute($stmt, OCI_DEFAULT);

    /*
    ....
    Parsing and executing other statements here ...
    ....
    */

    // Commit transaction
    $committed = oci_commit($conn);

    // Test whether commit was successful. If error occurred, return error message
    if (!$committed) {
        $error = oci_error($conn);
        echo 'Commit failed. Oracle reports: ' . $error['message'];
    }

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   &return.success;
  </para>
  <note>
   <para>
    当关闭连接或脚本结束时（看哪个先）事务会自动回卷。需要明确地调用
    <function>oci_commit</function> 来提交事务，或
    <function>oci_rollback</function> 来中止事务。
   </para>
  </note>
  <note>
   <para>
    在 PHP 5.0.0 之前的版本必须使用 <function>ocicommit</function>
    替代本函数。该函数名仍然可用，为向下兼容作为
    <function>oci_commit</function> 的别名。不过其已被废弃，不推荐使用。
   </para>
  </note>
  <simpara>
   参见 <function>oci_rollback</function> 和
   <function>oci_execute</function>。
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       An Oracle connection identifier, returned by
       <function>oci_connect</function>, <function>oci_pconnect</function>, or <function>oci_new_connect</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>oci_commit</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

// Insert into several tables, rolling back the changes if an error occurs

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, "INSERT INTO mysalary (id, name) VALUES (1, 'Chris')");

// The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately
// Use OCI_DEFAULT as the flag for PHP <= 5.3.1.  The two flags are equivalent
$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
if (!$r) {    
    $e = oci_error($stid);
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');
$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
if (!$r) {    
    $e = oci_error($stid);
    oci_rollback($conn);  // rollback changes to both tables
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

// Commit the changes to both tables
$r = oci_commit($conn);
if (!r) {
    $e = oci_error($conn);
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Transactions are automatically rolled back when you close the
    connection, or when the script ends, whichever is soonest. You
    need to explicitly call <function>oci_commit</function> to commit
    the transaction.
   </para>
   <para>
    Any call to <function>oci_execute</function> that uses
    <constant>OCI_COMMIT_ON_SUCCESS</constant> mode explicitly or by
    default will commit any previous uncommitted transaction.
   </para>
   <para>
    Any Oracle DDL statement such as <literal>CREATE</literal>
    or <literal>DROP</literal> will automatically commit any
    uncommitted transaction.
   </para>
  </note>
  <note>
   <para>
    In PHP versions before 5.0.0 you must
    use <function>ocicommit</function>
    instead. &oci.name.compat.note;
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_execute</function></member>
    <member><function>oci_rollback</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
