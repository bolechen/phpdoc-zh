<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Reviewed: no Maintainer: hytest -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist> 

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>
    开启或关闭压缩功能。当开启的时候，item的值超过某个阈值（当前是100bytes）时，会首先对值进行压缩然后存储，并
    在获取该值时进行解压缩然后返回，使得压缩对应用层透明。
    </para>
    <para>类型: <literal>boolean</literal>, 默认: &true;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <para>
    指定对于非标量值进行序列化的序列化工具。可用的值有<constant>Memcached::SERIALIZER_PHP</constant>
     和<constant>Memcached::SERIALIZER_IGBINARY</constant>。后者仅在memcached配置时开启
     <literal>--enable-memcached-igbinary</literal>选项并且
     <literal>igbinary</literal>扩展被加载时才有效。
    </para>
    <para>类型: <literal>integer</literal>, 默认: <constant>Memcached::SERIALIZER_PHP</constant>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>默认的PHP序列化工具（即serialize方法）。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <para><link xlink:href="&url.igbinary;">igbinary</link>序列化工具。它将php的数据结构
    存储为紧密的二进制形式，在时间和空间上都有所改进。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>JSON序列化，需要 PHP 5.2.10以上。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <para>
    可以用于为key创建“域”。这个值将会被作为每个key的前缀，它不能长于<literal>128</literal>个字符，
    并且将会缩短最大可允许的key的长度。这个前缀仅仅用于被存储的元素的key，而不会用于服务器key。
    </para>
    <para>类型: <literal>string</literal>, 默认: <literal>""</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <para>
    指定存储元素key使用的hash算法。可用的值是<constant>Memcached::HASH_*</constant>系列的常量。
    每种hash算法都有它的优势和劣势，在你不了解或不确定哪种算法对你更有利时，请使用默认值。
    </para>
    <para>类型: <literal>integer</literal>, 默认: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>默认的(Jenkins one-at-a-time)元素key hash算法</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>md5元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>CRC元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>FNV1_64元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>FNV1_64A元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>FNV1_32元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>FNV1_32A元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Hsieh元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Murmur元素key hash算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <para>
    指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供
    了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。
    </para>
    <para>类型: <literal>integer</literal>, 默认: <constant>Memcached::DISTRIBUTION_MODULA.</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>余数分布算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>一致性分布算法(基于libketama).</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>
    开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会
    采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样
    的服务端配置下可以透明的访问key。
    </para>
    <note>
     <para>
     如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。
     </para>
    </note>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <para>
    开启或关闭I/O缓存。开启I/O缓存会导致存储命令不实际发送而是存储到缓冲区中。任意的检索数据操作都会导致
    缓存中的数据被发送到远程服务端。退出连接或关闭连接也会导致缓存数据被发送到远程服务端。
    </para>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <para>
    开启使用二进制协议。请注意这个选项不能在一个打开的连接上进行切换。
    </para>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <para>
    开启或关闭异步I/O。这将使得存储函数传输速度最大化。
    </para>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>
    开启或关闭已连接socket的无延迟特性（在某些幻境可能会带来速度上的提升）。
    </para>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <para>socket发送缓冲的最大值。</para>
    <para>类型: <literal>integer</literal>, 默认: 根据不同的平台/内核配置不同</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <para>socket接收缓冲的最大值。</para>
    <para>类型: <literal>integer</literal>, 默认: 根据不同的平台/内核配置不同</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <para>在非阻塞模式下这里设置的值就是socket连接的超时时间，单位是毫秒。</para>
    <para>类型: <literal>integer</literal>, 默认: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <para>
    等待失败的连接重试的时间，单位秒。
    </para>
    <para>类型: <literal>integer</literal>, 默认: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <para>socket发送超时时间，单位微秒。在这种情况下您不能使用非阻塞I/O，这将使得您仍然有数据会发送超时。</para>
    <para>类型: <literal>integer</literal>, 默认: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <para>socket读取超时时间，单位微秒。在这种情况下您不能使用非阻塞I/O，这将使得您仍然有数据会读取超时。</para>
    <para>类型: <literal>integer</literal>, 默认: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <para>poll连接超时时间，单位毫秒。</para>
    <para>类型: <literal>integer</literal>, 默认: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <para>开启或禁用DNS查找缓存。</para>
    <para>类型: <literal>boolean</literal>, 默认: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <para>指定一个服务器连接的失败重试次数限制。在达到此数量的失败重连后此服务器将被从服务器池中移除。</para>
    <para>类型: <literal>integer</literal>, 默认: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <para>指示是否支持igbinary的序列化。</para>
    <para>类型: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <para>指示是否支持json的序列化。</para>
    <para>类型: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>一个用于<function>Memcached::getMulti</function>和
     <function>Memcached::getMultiByKey</function>的标记用以确保返回的key和请求的key顺序保持一致。
     不存在的key将会得到一个NULL值。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>操作成功。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>某种方式的操作失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>DNS查找失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>读取网络数据失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>错误的memcached协议命令。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>客户端错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>服务端错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>向网络写数据失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>比较并交换值操作失败（cas方法）：尝试向服务端存储数据时由于自此连接最后一次取此key对应数据之后被改变导致失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>元素没有被存储，但并不是因为一个错误。这通常表明add（元素已存在）或replace（元素不存在）方式存储数据失败或者元素已经在一个删除序列中（延时删除）。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>元素未找到（通过get或cas操作时）。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>局部网络数据读错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>在多key获取的时候发生错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>服务器池空。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>结果集到结尾了。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>系统错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>操作被缓存。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>操作超时。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>提供了无效的key。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>创建网络socket失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>不能压缩/解压缩或序列化/反序列化值。</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

