<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343944 Maintainer: yuanyuqiang Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mysqli.real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysqli::real_escape_string</refname>
  <refname>mysqli::escape_string</refname>
  <refname>mysqli_real_escape_string</refname>
  <refpurpose>根据当前连接的字符集，对于 SQL 语句中的特殊字符进行转义</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis role="oop">
   <type>string</type><methodname>mysqli::escape_string</methodname>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis role="oop">
   <type>string</type><methodname>mysqli::real_escape_string</methodname>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>string</type><methodname>mysqli_real_escape_string</methodname>
   <methodparam><type>mysqli</type><parameter>link</parameter></methodparam>
   <methodparam><type>string</type><parameter>escapestr</parameter></methodparam>
  </methodsynopsis>
  <para>
   此函数用来对字符串中的特殊字符进行转义，
   以使得这个字符串是一个合法的 SQL 语句。
   传入的字符串会根据当前连接的字符集进行转义，得到一个编码后的合法的 SQL 语句。
  </para>
  <caution>
   <title>安全：默认字符集</title>
   <para>
    在调用 <function>mysqli_real_escape_string</function> 
    函数之前，
    必须先通过调用 <function>mysqli_set_charset</function> 
    函数或者在 MySQL 服务器端设置字符集。
    更多信息请参考 <link linkend="mysqlinfo.concepts.charset">字符集</link>。
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysqli.link.description;
    <varlistentry>
     <term><parameter>escapestr</parameter></term>
     <listitem>
      <para>
       需要进行转义的字符串。
      </para>
      <para>
       会被进行转义的字符包括： <literal>NUL （ASCII 0），\n，\r，\，'，" 和
       Control-Z</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   转义后的字符串。
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   在无效的连接上调用此函数会返回
   &null; 并发出一个 <constant>E_WARNING</constant> 级别的错误。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>mysqli::real_escape_string</methodname> 例程</title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* 检查连接 */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* 由于未对 $city 进行转义，此次查询会失败 */
if (!$mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Error: %s\n", $mysqli->sqlstate);
}

$city = $mysqli->real_escape_string($city);

/* 对 $city 进行转义之后，查询可以正常执行 */
if ($mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d Row inserted.\n", $mysqli->affected_rows);
}

$mysqli->close();
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* 检查连接 */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* 由于未对 $city 进行转义，此次查询会失败 */
if (!mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Error: %s\n", mysqli_sqlstate($link));
}

$city = mysqli_real_escape_string($link, $city);

/* 对 $city 进行转义之后，查询可以正常执行 */
if (mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d Row inserted.\n", mysqli_affected_rows($link));
}

mysqli_close($link);
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
Error: 42000
1 Row inserted.
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    如果你之前都是使用 <function>mysql_real_escape_string</function> 函数来转义 SQL 语句的，
    那么需要注意的是 <function>mysqli_real_escape_string</function> 和
    <function>mysql_real_escape_string</function> 两个函数的参数顺序不同。
    <function>mysqli_real_escape_string</function> 中，
    <parameter>link</parameter> 是第一个参数，
    而在 <function>mysql_real_escape_string</function> 函数中，要转义的字符串是第一个参数。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysqli_set_charset</function></member>
    <member><function>mysqli_character_set_name</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
