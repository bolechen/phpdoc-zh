<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 334917 Maintainer: daijie Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
 <refname>spl_autoload_register</refname>
  <refpurpose>注册给定的函数作为 __autoload 的实现</refpurpose>
 </refnamediv>
  <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>autoload_function</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>true</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
  <para>
  将函数注册到SPL __autoload函数队列中。如果该队列中的函数尚未激活，则激活它们。
  </para>
  <para>
   如果在你的程序中已经实现了<function>__autoload</function>函数，它必须显式注册到<function>__autoload</function>队列中。因为
  <function>spl_autoload_register</function>函数会将Zend Engine中的<function>__autoload</function>函数取代为<function>spl_autoload</function>或<function>spl_autoload_call</function>。
  </para>
  <para>
   如果需要多条 autoload 函数，<function>spl_autoload_register</function> 
    满足了此类需求。
   它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下，
   <function>__autoload</function> 只可以定义一次。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>autoload_function</parameter></term>
     <listitem>
      <para>
       欲注册的自动装载函数。如果没有提供任何参数，则自动注册 autoload 的默认实现函数<function>spl_autoload</function>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       此参数设置了 <parameter>autoload_function</parameter> 无法成功注册时，
       <function>spl_autoload_register</function>是否抛出异常。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       如果是 true，<function>spl_autoload_register</function> 会添加函数到队列之首，而不是队列尾部。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>


 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        引入了命名空间的支持。
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        添加了 <parameter>prepend</parameter> 参数。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>spl_autoload_register</function> 作为 <function>__autoload</function> 函数的替代</title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($class) {
//     include 'classes/' . $class . '.class.php';
// }

function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

// 或者，自 PHP 5.3.0 起可以使用一个匿名函数
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>class 未能加载的 <function>spl_autoload_register</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print '[['. $name .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test'); // 自 PHP 5.3.0 起

new InexistentClass;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
