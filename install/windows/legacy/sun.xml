<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- Reviewed: yes Maintainer: dallas -->
<!-- EN-Revision: 297028 Maintainer: dallas Status: ready -->
<sect2 xml:id="install.windows.legacy.sun" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Microsoft Windows 下的 Sun，iPlanet 和 Netscape 服务器</title>
 <para>
  本节包含针对在 Windows 下 Sun Java System web 服务器，Sun ONE web 服务器，iPlanet 和
  Netscape 服务器的 PHP 安装说明与提示。
 </para>
 <para>
  自 PHP 4.3.3 起可以通过 
  <link linkend="ref.nsapi">NSAPI 模块</link>使用 PHP 脚本来<link
  linkend="install.windows.legacy.sun.specialpages">产生定制目录列表于错误页面</link>。也可以使用为兼容
  Apache 的附加函数。目前使用的 web 服务器的支持请阅读<link
  linkend="install.windows.legacy.sun.notes">有关子请求的说明</link>。
 </para>
 
 <sect3 xml:id="install.windows.legacy.sun.cgi">
  <title>Sun，iPlanet 和 Netscape 服务器的 CGI 方式安装</title>
  <para>
   要将 PHP 安装为 CGI 处理器，按以下步骤进行：
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     将 <filename>php4ts.dll</filename> 拷贝到 systemroot（即 Windows 的安装目录）；
    </simpara>
   </listitem>
   <listitem>
    <para>
     在命令行做文件关联，输入以下两行命令： 
     <programlisting role="shell">
<![CDATA[
assoc .php=PHPScript
ftype PHPScript=c:\php\php.exe %1 %*
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <simpara>
     在 Netscape Enterprise Administration Server 中建一个空的 shellcgi
     目录并随即删除（此步骤在 obj.conf 中新建了 5 行重要指令以允许 web
     服务器处理 shellcgi 脚本）；
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     在 Netscape Enterprise Administration Server 中新建一个新的 MIME
     类型（Category: type，Content-Type: magnus-internal/shellcgi，File Suffix: php）；
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     对每个要运行 PHP 的 web 服务器实例都进行以上步骤。
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   更多将 PHP 设置为 CGI 可执行程序的内容见：<link
   xlink:href="&url.netscape.cgi;">&url.netscape.cgi;</link>。
  </para>
 </sect3>
 
 <sect3 xml:id="install.windows.legacy.sun.nsapi">
  <title>Sun，iPlanet 和 Netscape 服务器的 NSAPI 方式</title>
  <para>
   要将 PHP 以 NSAPI 方式安装，按以下步骤进行：
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     将 <filename>php4ts.dll</filename>拷贝到 systemroot（即 Windows 的安装目录）；
    </simpara>
   </listitem>
   <listitem>
    <para>
     在命令行做文件关联，输入以下两行命令： 
     <programlisting role="shell">
<![CDATA[
assoc .php=PHPScript
ftype PHPScript=c:\php\php.exe %1 %*
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <simpara>
     在 Netscape Enterprise Administration Server 中新建一个新的 MIME
     类型（Category: type，Content-Type: magnus-internal/x-httpd-php，File Suffix: php）；
    </simpara>
   </listitem>
   <listitem>
    <para>
     编辑 <filename>magnus.conf</filename>（服务器版本 &gt;= 6）或 
     <filename>obj.conf</filename>（服务器版本 &lt; 6）并加入下面两行；要将新行放在 
     <literal>mime types init</literal>之后：
     <programlisting>
<![CDATA[
Init fn="load-modules" funcs="php4_init,php4_execute,php4_auth_trans" shlib="c:/php/sapi/php4nsapi.dll"
Init fn="php4_init" LateInit="yes" errorString="Failed to initialise PHP!" [php_ini="c:/path/to/php.ini"]
]]>
     </programlisting>
     （PHP &gt;= 4.3.3）<literal>php_ini</literal>
     参数为可选项，但加上后就可以把 &php.ini; 放到 web 服务器的配置目录中去；
    </para>
   </listitem>
   <listitem>
    <para>
     在 <filename>obj.conf</filename> 中配置默认对象（对于虚拟服务器类 [Sun web Server 6.0+]
     是 <filename>vserver.obj.conf</filename>文件）：在
     <literal>&lt;Object name=&quot;default&quot;&gt;</literal>
     一节，在所有的“ObjectType”行之后和所有的“AddLog”行之前加上这一行： 
     <programlisting>
<![CDATA[
Service fn="php4_execute" type="magnus-internal/x-httpd-php" [inikey=value inikey=value ...]
]]>
     </programlisting>
     （PHP &gt;= 4.3.3）作为附加参数可以加入一些特殊的 &php.ini; 值，例如可以在调用 
     <literal>php4_execute</literal> 时设定专门的 
     <literal>docroot=&quot;/path/to/docroot&quot;</literal>。对于布尔的 ini 选项请用 0/1 作为值，而不是 
     <literal>&quot;On&quot;,&quot;Off&quot;,...</literal>（这样不能正确工作），例如要用 
     <literal>zlib.output_compression=1</literal> 而不是 
     <literal>zlib.output_compression=&quot;On&quot;</literal>；
    </para>
   </listitem>
   <listitem>
    <para>
     这几行仅在想要配置一个只有 PHP 脚本的目录时需要（类似 cgi-bin 目录）： 
     <programlisting>
<![CDATA[
<Object name="x-httpd-php">
ObjectType fn="force-type" type="magnus-internal/x-httpd-php"
Service fn=php4_execute [inikey=value inikey=value ...]
</Object>
]]>
     </programlisting>
     在此之后可以在管理服务器中配置目录并将其类型设为 
     <literal>x-httpd-php</literal>。其中的所有文件都将作为 PHP 执行。这样可以隐藏 PHP 的使用，文件名还保留为 
     <filename>.html</filename>；
    </para>
   </listitem>
   <listitem>
    <simpara>
     重启动 web 服务使改动生效；
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     对每个要运行 PHP 的 web 服务器实例都进行以上步骤。
    </simpara>
   </listitem>
  </itemizedlist>
  <note>
   <para>
    更多将 PHP 设置为 NSAPI内容见：<link
    xlink:href="&url.netscape.nsapi;">&url.netscape.nsapi;</link>。
   </para>
  </note>
  <note>
   <para>
    PHP 使用的堆栈大小（stacksize）依赖于 web 服务器的配置。如果在运行很大的
    PHP 脚本时死掉，建议在管理服务器中增大此值（在 &quot;MAGNUS EDITOR&quot; 一节中）。
   </para>
  </note>
 </sect3>
 
 <sect3 xml:id="install.windows.legacy.sun.phpini">
  <title>CGI 环境以及推荐在 php.ini 中进行的修改</title>
  <para>
   在写 PHP 脚本时很重要一点是 Sun JSWS/Sun ONE WS/iPlanet/Netscape
   是多线程 web 服务器。因此所有的请求都运行于同一个进程空间（即 web
   服务器自己的空间）而此空间只有一个环境。如果想取得 CGI
   变量例如 <literal>PATH_INFO</literal>，<literal>HTTP_HOST</literal>
   等时不能用老的 PHP 3.x 的方式 <function>getenv</function>
   或者类似手段（<literal>$_ENV</literal>）进行。只能取得运行的 web
   服务器的环境变量而没有任何有效的 CGI 变量！
  </para>
  <note>
   <para>
    为什么环境中有一些（无效的）CGI 变量？
   </para>
   <para>
    解答：这是因为从管理服务器启动了 web 服务器进程，这将运行 web
    服务器的启动脚本，而你想要启动的是 CGI 脚本（CGI 脚本在管理服务器内部！）。这是为什么
    web 服务器启动的环境中有一些 CGI 环境变量的原因。可以不从管理服务器启动 web
    服务器来试验一下。用管理员用户从命令行手工启动——这样就不会看到类似 CGI 的环境变量了。
   </para>
  </note>
  <para>
   PHP 4.x 中取得 CGI 变量的正确方式是使用超全局变量 
   <varname>$_SERVER</varname>。如果有一些老的脚本用了 
   <varname>$HTTP_HOST</varname> 等，那应该在 &php.ini; 中打开 
   <literal>register_globals</literal> 选项并改变变量顺序（重要提示：去掉 
   <literal>&quot;E&quot;</literal>，因为这里不需要环境变量）： 
   <programlisting>
<![CDATA[
variables_order = "GPCS"
register_globals = On
]]>
   </programlisting>
  </para>
 </sect3>
 
 <sect3 xml:id="install.windows.legacy.sun.specialpages">
  <title>错误页面的特殊使用或定制目录列表（PHP &gt;= 4.3.3）</title>
  <para>
   可以用 PHP 来为 <literal>&quot;404 Not Found&quot;</literal> 
   或类似的错误提示生成错误页面。对每个想要覆盖的错误页面在 
   <filename>obj.conf</filename> 中的对象里加入下面这行： 
   <programlisting>
<![CDATA[
Error fn="php4_execute" code=XXX script="/path/to/script.php" [inikey=value inikey=value...]
]]>
   </programlisting>
   其中的 <literal>XXX</literal> 是 HTTP 错误代码。删除掉可能干扰到自己设置的任何其它 
   <literal>Error</literal> 指令。如果对所有可能出现的错误都用同一个脚本处理，不要 
   <literal>code</literal> 参数即可。脚本里可以用 
   <varname>$_SERVER['ERROR_TYPE']</varname> 取得 HTTP 状态代码。
  </para>
  <para>
   还可以生成自己定制的目录列表。只要创建一个显示目录列表的 PHP 脚本并用下面一行在 
   <filename>obj.conf</filename> 中替换掉相应 
   <literal>type=&quot;magnus-internal/directory&quot;</literal> 默认的 Service 设置： 
   <programlisting>
<![CDATA[
Service fn="php4_execute" type="magnus-internal/directory" script="/path/to/script.php" [inikey=value inikey=value...]
]]>
   </programlisting>
   对于错误和目录列表页面，原始的 URI 和转换后的 URI 都在变量 
   <varname>$_SERVER['PATH_INFO']</varname> 和 
   <varname>$_SERVER['PATH_TRANSLATED']</varname> 中。
  </para>
 </sect3>
 
 <sect3 xml:id="install.windows.legacy.sun.notes">
  <title>有关 <function>nsapi_virtual</function>和子请求（PHP &gt;= 4.3.3）的说明</title>
  <para>
   NSAPI 模块现在支持 <function>nsapi_virtual</function>
   函数（别名：<function>virtual</function>）来进行子请求并将结果插入到 web
   页面里。问题是，此函数用到了一些 NSAPI 库中没有文档说明的特性。
  </para>
  <para>
   在 Unix 下这不是问题，因为模块会自动寻找所需的函数并使用。如果找不到，<function>nsapi_virtual</function>
   被禁用。
  </para>
  <para>
   在 Windows 下 DLL 处理的局限性需要使用最新的 
   <filename>ns-httpdXX.dll</filename> 文件中的自动检测功能。这已在版本 6.1
   及以下的服务器中测试过。如果用了更高版本的 Sun 服务器，检测会失败并禁用 
   <function>nsapi_virtual</function>。
  </para>
  <para>
   在这种情况下，试试下面的方法。在 <filename>magnus.conf</filename>/<filename>obj.conf</filename>
   中的 <literal>php4_init</literal> 里加入下面的参数： 
   <programlisting>
<![CDATA[
Init fn=php4_init ... server_lib="ns-httpdXX.dll"
]]>
   </programlisting>
   其中 <literal>XX</literal> 是正确的 DLL 版本号。在 server-root 目录下去找合适的
   DLL 的名字。文件大小最大的 DLL 就是了。
  </para>
  <para>
   可以用 <function>phpinfo</function> 函数来检查状态。
  </para>
  <note>
   <para>
    但要注意：对 <function>nsapi_virtual</function> 的支持是试验性质的！
   </para>
  </note>
 </sect3>
 
</sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
