<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 340962 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<appendix xml:id="migration5" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>从 PHP 4 移植到 PHP 5</title>
  <para>
   &manual.migration.seealso;
   <link linkend="migration51">5.1.x</link>, 
   <link linkend="migration52">5.2.x</link> and 
   <link linkend="migration53">5.3.x</link>.
  </para>
  <section xml:id="migration5.changes">
   <title>PHP 5 中有哪些改变</title>
   <para>
    PHP 5 和集成的 Zend Engine 2 代极大提高了 PHP
    的性能和能力，而且投入极大努力尽可能避免破坏已有的代码的使用。因此将代码从
    PHP 4 移植到 PHP 5 应该很容易。大多数已有的 PHP 4
    代码应该不用改就能运行，但还是应该注意到<link
    linkend="migration5.incompatible">几点区别</link>并在实际运作环境下转换到新版本之前多做测试。
   </para>
  </section>

  <section xml:id="migration5.incompatible">
   <title>未向下兼容的改变</title>
   <para>
    尽管大部分 PHP 4 的代码应该不用修改就能运行，还是应该留意以下不向下兼容的改变：
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      有了一些<link linkend="reserved.keywords">新关键字</link>。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>strrpos</function> 和 <function>strripos</function>
      如今使用整个字符串作为 needle。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      非法使用字符串偏移量会导致 <constant>E_ERROR</constant> 而不是
      <constant>E_WARNING</constant>。一个非法使用的例子：<literal>$str = 'abc'; unset($str[0]);</literal>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_merge</function> 被改成只接受数组。如果传递入非数组变量，对每个此类参数都会发出一条
      <constant>E_WARNING</constant> 信息。要小心因为你的代码有可能疯狂发出
      <constant>E_WARNING</constant>。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      PATH_TRANSLATED 服务器变量在 Apache2 SAPI 中不再暗中设定，这和 PHP 4
      中的情形相反，如果 Apache 没产生此值则其被设为和
      SCRIPT_FILENAME 服务器变量一样的值。此修改是为了遵守
      <link xlink:href="&url.rfc;3875">CGI 规范</link>。更多信息见 <link
      xlink:href="&url.php.bugs;23610">bug #23610</link>，并参考手册中
      <link linkend="reserved.variables.server">$_SERVER['PATH_TRANSLATED']</link>
      的说明。此问题也影响到 PHP &gt;= 4.3.2 的版本。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ref.tokenizer">Tokenizer</link> 扩展不再定义
      <constant>T_ML_COMMENT</constant> 常量。如果把
      error_reporting 设为 <constant>E_ALL</constant>，PHP
      将产生一条消息。尽管 <constant>T_ML_COMMENT</constant>
      从来都没用到过，还是在 PHP 4 中定义了。在 PHP 4 和 PHP 5
      中 // 和 /* */ 都被解析为 <constant>T_COMMENT</constant>
      常量。但是 PHPDoc 风格的注释 /** */，自 PHP 5 开始被
      PHP 解析，被识别为 <constant>T_DOC_COMMENT</constant>。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      如果 <link linkend="ini.variables-order">variables_order</link>
      包括“S”，$_SERVER 应该带有 argc 和 argv 被产生。如果用户特别配制系统不创建
      $_SERVER，那此变量当然就不存在了。改变的地方是不管 <link
      linkend="ini.variables-order">variables_order</link> 怎么设定，在
      CLI 版本中 argc 和 argv 总是可用的。本来 CLI
      版不是总会产生全局变量 $argc 和 $argv 的。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      没有属性的对象不再被当成“empty”。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      有些情况下类必须在使用前被定义。这仅在使用了一些 PHP 5
      的新特性（例如 <link linkend="language.oop5.interfaces">interfaces</link>）的时候发生。其它情况下行为都没变。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_class</function>，<function>get_parent_class</function>
      和 <function>get_class_methods</function>
      如今返回的类／方法名和定义时的名字一致（区分大小写），对于依赖以前行为（类／方法名总是返回小写的）的老脚本可能产生问题。一个可能的解决方法是在脚本中搜索所有这些函数并使用
      <function>strtolower</function>。
     </simpara>
     <simpara>
      区分大小写的改变也适用于<link
      linkend="language.constants.predefined">魔术常量</link>
      <constant>__CLASS__</constant>，<constant>__METHOD__</constant>
      和 <constant>__FUNCTION__</constant>。其值都会严格按照定义时的名字返回（区分大小写）。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ip2long</function> 在传递入一个非法
      IP 作为参数时返回 &false;，不再是
      <literal>-1</literal>。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      如果有函数定义在包含文件中，则这些函数可以在主文件中使用而与是否在
      <function>return</function> 指令之前还是之后无关。如果文件被包含两次，PHP 5
      会发出致命错误，因为函数已经被定义，而 PHP 4
      不管这个。因此推荐使用 <function>include_once</function>
      而不要去检查文件是否已被包含以及在包含文件中有条件返回。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>include_once</function> 和 <function>require_once</function>
      在 Windows 下先将路径规格化，因此包含
      A.php 和 a.php 只会把文件包含一次。
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    <example>
     <title>
      <function>strrpos</function> 和 <function>strripos</function>
      如今用整个字符串作为 needle
     </title>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(strrpos('ABCDEF','DEF')); //int(3)

var_dump(strrpos('ABCDEF','DAF')); //bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>没有属性的对象不再被当成“empty”</title>
     <programlisting role="php">
<![CDATA[
<?php
class test { }
$t = new test();

var_dump(empty($t)); // echo bool(false)

if ($t) {
    // Will be executed
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>有些情况下类必须在使用之前定义</title>
     <programlisting role="php">
<![CDATA[
<?php

//works with no errors:
$a = new a();
class a {
}


//throws an error:
$a = new b();

interface c{
}
class b implements c {
}

?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="migration5.cli-cgi">
   <title>CLI 和 CGI</title>
   <para>
    PHP 5 中对 CLI 和 CGI 文件名作了些改变。PHP 5 中，CGI
    版本被改名为 <filename>php-cgi.exe</filename>（以前是
    <filename>php.exe</filename>），现在主目录中的是 CLI 版本（之前是
    <filename>cli/php.exe</filename>）。
   </para>
   <para>
    PHP 5 中引进了一种新模式：<filename>php-win.exe</filename>。这和 CLI
    版本相同，只除了 php-win 不输出任何内容，因此不会提供控制台（屏幕上不会闪过“dos
    窗口”）。此行为类似 php-gtk。
   </para>
   <para>
    PHP 5 中，CLI 版本总会产生全局变量
    <varname>$argv</varname> 和 <varname>$argc</varname>
    而不管 &php.ini; 是怎么设的。即使将
    <link linkend="ini.register-argc-argv">register_argc_argv</link>
    设为 <literal>off</literal> 也不影响 CLI。
   </para>
   <para>
    参见<link linkend="features.commandline">命令行模式</link>。
   </para>
  </section>

  <section xml:id="migration5.configuration">
   <title>移植配置文件</title>
   <para>
    由于 ISAPI 模块的名字改了，从 php4xxx 改为
    php5xxx，因此需要对配置文件作些修改。CLI 和 CGI
    文件名也改了。更多信息请查看<link
     linkend="migration5.cli-cgi">相应章节</link>。
   </para>
   <para>
    移植 Apache 配置极其简单。照下面的例子来检查需要做的修改：
    <example>
     <title>移植 Apache 配置文件到 PHP 5</title>
     <programlisting role="apache-conf">
<![CDATA[
# 将下面这行：
LoadModule php4_module /php/sapi/php4apache2.dll

# 改成这一行：
LoadModule php5_module /php/php5apache2.dll
]]>
     </programlisting>
    </example>
   </para>
   <para>
    如果 web 服务器是以 CGI 模式运行 PHP 的，应该注意 CGI 版本的名字从
    <filename>php.exe</filename> 改为了
    <filename>php-cgi.exe</filename>。在 Apache 中，应该照这样改：
    <example>
     <title>移植 Apache 配置文件到 PHP 5，CGI 模式</title>
     <programlisting role="apache-conf">
<![CDATA[
# 将下面这行：
Action application/x-httpd-php "/php/php.exe"

# 改成这一行：
Action application/x-httpd-php "/php/php-cgi.exe"
]]>
     </programlisting>
    </example>
   </para>
   <para>
    其它的 web 服务器中，需要修改 CGI 或者 ISAPI 模块的名字。
   </para>
  </section>

  <section xml:id="migration5.functions">
   <title>新函数</title>
   <para>
    PHP 5 有了些新函数。下面是列表：
   </para>
   <para><link linkend="ref.array">Arrays</link>:</para>
    <itemizedlist>
    <listitem>
     <simpara>
      <function>array_combine</function> -
      用一个数组作为键名，另一个数组作为值创建一个新数组
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_diff_uassoc</function> -
      计算数组的差别，并用用户提供的回调函数作附加的索引检查
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff</function> -
      用回调函数比较数据来计算数组的差别
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff_assoc</function> -
      计算数组的差别并作附加的索引检查。用回调函数来比较数据
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff_uassoc</function> -
      计算数组的差别并作附加的索引检查。数据的比较和索引检查都用回调函数来完成
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_walk_recursive</function> -
      对数组的每个成员递归使用用户函数
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_uintersect_assoc</function> -
      计算数组的交集并作附加的索引检查。用回调函数来比较数据
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_uintersect_uassoc</function> -
      计算数组的交集并作附加的索引检查。数据和索引都用回调函数来比较
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_uintersect</function> -
      计算数组的交集。用回调函数来比较数据
     </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.ibase">InterBase</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>ibase_affected_rows</function> -
      返回前一个查询影响到的行的数目
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_backup</function> -
      在服务管理器中发起一个后台任务并立即返回
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_commit_ret</function> -
      提交一个事务但不关闭
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_db_info</function> -
      请求有关数据库的统计信息
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_drop_db</function> -
      删除一个数据库
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_errcode</function> -
      返回一个错误代码
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_free_event_handler</function> -
      取消一个已注册的事件句柄
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_gen_id</function> -
      递增指定的发生器并返回其新值
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_maintain_db</function> -
      在数据库服务器上执行一条维护命令
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_name_result</function> -
      给结果集指定一个名字
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_num_params</function> -
      返回一个准备好的查询的参数数目
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_param_info</function> -
      返回一个准备好的查询的参数信息
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_restore</function> -
      在服务管理器中发起一个还原任务并立即返回
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_rollback_ret</function> -
      回卷一笔事务并保留事务上下文
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_server_info</function> -
      请求有关数据库服务器的统计信息
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_service_attach</function> -
      连接到服务管理器
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_service_detach</function> -
      从服务管理器断开
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_set_event_handler</function> -
      注册一个当事件发布时要调用的回调函数
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_wait_event</function> -
      等待数据库发布一条事件
     </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.iconv">iconv</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>iconv_mime_decode</function> -
      解码 MIME 头信息字段
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_mime_decode_headers</function> -
      一次解码多个 MIME 头信息字段
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_mime_encode</function> -
      压缩 MIME 头信息字段
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strlen</function> -
      返回字符串中的字符计数
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strpos</function> -
      在堆栈中找到第一个出现的子串位置
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strrpos</function> -
      在堆栈中找到最后一个出现的子串位置
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_substr</function> -
      从字符串中取出一部分
     </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.stream">Streams</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>stream_copy_to_stream</function> -
      把一个流的数据复制到另一个流
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_get_line</function> -
      根据给定的分隔符中流中读取一行
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_accept</function> - 接受一个由
      <function>stream_socket_server</function> 建立的 socket 连接
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_client</function> - 打开一个 Internet 或 Unix
      域的 socket 连接
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_get_name</function> - 获取本地或远程的 sockets
      名字
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_recvfrom</function> - 从 socket
      获取数据（不管连接是否已经建立）
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_sendto</function> - 向 socket
      发送一个消息（不管连接是否已经建立）
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_server</function> - 建立一个 Internet 或 Unix
      域服务器的 socket
     </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.datetime">Date/Time</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>idate</function> - 将本地时间格式化为整数
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>date_sunset</function> - 计算所指定日期和地点的日落时间
    </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>date_sunrise</function> - T计算所指定日期和地点的日出时间
    </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>time_nanosleep</function> - 廷迟执行程若干秒和若干纳秒
    </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.strings">Strings</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>str_split</function> - 把一个字符串分割为数组
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>strpbrk</function> - 在一字符串中搜索给定的字符集合中的任意一个字符
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>substr_compare</function> - 以二进制的形式比较两个字符串，从第一个字符串的
      offset 开始，直到到达长度为 length 时结束，可自定义是否大小写敏感比较
     </simpara>
    </listitem>
   </itemizedlist>

   <para>Other:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>convert_uudecode</function> - 解码 uuencoded 的字符串
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>convert_uuencode</function> - 对字符串进行 uuencode
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>curl_copy_handle</function> - 复制一个 cURL 句柄及其所有参数
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dba_key_split</function> - 把一个键分隔为字符串数组
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dbase_get_header_info</function> - 取得 dBase 数据库的头部信息
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dbx_fetch_row</function> - 获取结果集中被设置为 DBX_RESULT_UNBUFFERED
      的行
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>fbsql_set_password</function> - 修改指定用户的密码
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>file_put_contents</function> - 向一个文件内写入字符串
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ftp_alloc</function> - 为准备上传的文件分配空间
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_declared_interfaces</function> - 以数组的形式返回所有已定义的接品
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_headers</function> - 获取服务器响应 HTTP
      请求时的所有头部信息
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>headers_list</function> - 返回所有已发送或准备发送响应头部列表
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>http_build_query</function> - 生成一个已经过 URL 编码的请求字符串
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>image_type_to_extension</function> - 根据
      <function>getimagesize</function>,
      <function>exif_read_data</function>,
      <function>exif_thumbnail</function>,
      <function>exif_imagetype</function> 所返回的 image-type 取得文件名后缀
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>imagefilter</function> - 对图像应用滤镜
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>imap_getacl</function> - 获取指定邮箱的 ACL
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ldap_sasl_bind</function> - 使用 SASL 绑定到 LDAP 目录
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>mb_list_encodings</function> - 以数组的形式返回所支持的全部字符集
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pcntl_getpriority</function> - 获得任意一个进程的优先级
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pcntl_wait</function> - Waits on or returns the status of a
      forked child as defined by the waitpid() system call
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pg_version</function> - 返回一个包含客户端、协议和服务器版本的数组
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>php_check_syntax</function> - 检查指定文件的语法
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>php_strip_whitespace</function> - 返回已经去除注释和空白的源代码
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>proc_nice</function> - 修改当前进程的优前级
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pspell_config_data_dir</function> - 修改语言文件的位置
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pspell_config_dict_dir</function> - 修改主要单词列表的位置
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>setrawcookie</function> - 发送一个没有经过 url 编码的 cookie
      值
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>scandir</function> -
      列中指定目录中的所有子目录和文件
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>snmp_read_mib</function> - 在一个可用的 MIB 树中读取和分板一个
      MIB 文件
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>sqlite_fetch_column_types</function> -
      以数组的形式返回一张表中的列类型
     </simpara>
    </listitem>
   </itemizedlist>
   <note>
    <para>
     <link linkend="ref.tidy">Tidy</link> 扩展库的 API 也作了重大调整
    </para>
   </note>
  </section>


  <section xml:id="migration5.newconf">
   <title>新指令</title>
   <para>
    PHP 5 在 &php.ini; 中引进了一些新指令。列表如下：
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      mail.force_extra_parameters -
      强制指定的参数附加值作为额外的参数传递给 sendmail 库。这些参数总是会替换掉
      <function>mail</function> 的第 5 个参数，即使在安全模式下
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.register-long-arrays">register_long_arrays</link> -
      允许／禁止 PHP 注册已过时的 $HTTP_*_VARS 变量
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.session.hash-function">session.hash_function</link> -
      选择一种散列函数（MD5 或 SHA-1）
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.session.hash-bits-per-character">session.hash_bits_per_character</link> -
      定义将二进制散列数据转换为可读格式时每个字符中储存几个位（从 4 到 6）
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.zend.ze1-compatibility-mode">zend.ze1_compatibility_mode</link> -
      启用 Zend Engline 1 代（PHP 4）兼容模式
     </simpara>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="migration5.databases">
   <title>数据库</title>
   <para>
    关于数据库（MySQL 和 SQLite）在 PHP 5 中有些改变。
   </para>
   <para>
    因为授权和维护问题，PHP 5 中不再<emphasis>默认</emphasis>绑定 MySQL 客户端连接库。
    本质上讲， PHP 的 <link linkend="configuration">configure</link> 不再包含 <option role="configure">--with-mysql</option> 选项，
    所以需要在编译 PHP 的时候自己手动加上选项。
    
    Windows 用户需要编辑 &php.ini; 开启 PHP 4 中不存在的 <filename>php_mysql.dll</filename>
    DLL 文件，因为之前内置于 PHP 二进制文件中。
   </para>
   <para>
    有个新扩展库 <link linkend="ref.mysqli">MySQLi（改良版
    MySQL）</link>，设计用来工作于 MySQL 4.1 及更高版本之下。
   </para>
   <para>
    自 PHP 5 起，<link linkend="ref.sqlite">SQLite</link> 扩展库内置在
    PHP 中。SQLite 是一个可嵌入 SQL
    数据库引擎，不是客户端连接库用来连接大型数据库服务器（如 MySQL 或
    PostgreSQL）的。SQLite 库直接读写磁盘上的数据库文件。
   </para>
  </section>


  <section xml:id="migration5.oop">
   <title>新对象模型</title>
   <para>
    PHP 5 中有个新对象模型（Object Model）。PHP
    处理对象的方式完全重写了，允许更佳性能和更多特性。之前版本的
    PHP，对象处理方式和原始类型（例如整型和字符串）相同。此方法的缺点是当变量被赋值或作为参数传递给方法时语义上整个对象都被拷贝。在新方法中，对象通过句柄引用，而不是值（可以将句柄当成是对象的标识符）。
   </para>
   <para>
    很多 PHP 程序员根本没意识到旧的对象模型的这种拷贝怪癖，因此大多数 PHP
    应用程序拿来就能运行，或者只做很小的修改。
   </para>
   <para>
    新对象模型的文档见<link
    linkend="language.oop5">语言参考</link>。
   </para>
   <para>
    与 PHP 4 的兼容性参见 <link
    linkend="ini.zend.ze1-compatibility-mode">zend.ze1_compatibility_mode</link>。
   </para>
  </section>

  <section xml:id="migrating5.errorrep">
   <title>错误报告</title>
   <para>
    自 PHP 5 起引进了新常量 E_STRICT，其值为
    2048。它提供了对用户代码的协同性和向前兼容性的运行时 PHP
    建议，有助于使用户保持最新和最好的编程风格。例如在使用已过时的函数时
    STRICT 信息会提出警告。
   </para>
   <note>
    <simpara>
     E_ALL 不包括 E_STRICT，因此其默认未激活。
    </simpara>
   </note>
  </section>

 </appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
