<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- $EN-Revision: 297557 $ -->
<appendix xml:id="transports"
          xmlns="http://docbook.org/ns/docbook">
  <title>所支持的套接字传输器（Socket Transports）列表</title>
  <para>以下是 PHP 内置用于基于流的套接字函数例如 
  <function>fsockopen</function>和 
  <function>stream_socket_client</function>的各种 URL 风格的套接字传输器。这些传输器
  <emphasis>不适用</emphasis>于 
  <link linkend="ref.sockets">Sockets 扩展库</link>。</para>
  <para>要得到自己的 PHP 版本中所安装的传输器列表，使用 
  <function>stream_get_transports</function>。</para>
  <section xml:id="transports.inet">
    <title>Internet 领域：TCP，UDP，SSL 和 TLS</title>
    <simpara>PHP 3，PHP 4，PHP 5。 
    <literal>ssl://</literal>&amp; 
    <literal>tls://</literal>自 PHP 4.3 起可用。</simpara>
    <simpara>
    <literal>sslv2://</literal>&amp; 
    <literal>sslv3://</literal>自 PHP 5.0.2 起可用。</simpara>
    <note>
      <simpara>如果没有指定传输器，则假定为 
      <literal>tcp://</literal>。</simpara>
    </note>
    <itemizedlist>
      <listitem>
        <simpara>
          <literal>127.0.0.1</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>fe80::1</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tcp://127.0.0.1</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tcp://fe80::1</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tcp://www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>udp://www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>ssl://www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>sslv2://www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>sslv3://www.example.com</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tls://www.example.com</literal>
        </simpara>
      </listitem>
    </itemizedlist>
    <simpara>Internet 领域套接字在目标地址中还期望有一个端口号。在 
    <function>fsockopen</function>中在第二个参数中指定，这样就不会影响传输器的 URL。然而在 
    <function>stream_socket_client</function>和相关的函数中是用传统的 URL，端口号在传输器 URL 后面以冒号分隔而指定。</simpara>
    <itemizedlist>
      <listitem>
        <simpara>
          <literal>tcp://127.0.0.1:80</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tcp://[fe80::1]:80</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>tcp://www.example.com:80</literal>
        </simpara>
      </listitem>
    </itemizedlist>
    <note>
      <title>带端口号的 IPv6 数字地址</title>
      <simpara>在上面的第二个例子中，IPv4 和主机名的例子只加了一个冒号和端口号，但 IPv6 的地址被放在方括号中：
      <literal>[fe80::1]</literal>。这是为了将 IPv6 地址中的冒号和用来分隔端口号的冒号区别开来。</simpara>
    </note>
    <simpara>
    <literal>ssl://</literal>和 
    <literal>tls://</literal>传输器（仅在 openssl 支持已编译入 PHP 后可用）是 
    <literal>tcp://</literal>传输器加入 SSL 加密后的扩展。在 PHP 4.3.0 中 OpenSSL 支持必须被静态编译入 PHP，在 PHP 5.0.0 中可以编译为模块或者静态的。</simpara>
    <simpara>
    <literal>ssl://</literal>将根据远程服务器的兼容性和参数设置尝试与之建立 SSL V2 或 SSL V3 链接 
    <literal>sslv2://</literal>和 
    <literal>sslv3://</literal>将明确的选择 SSL V2 或 SSL V3 协议进行连接。</simpara>
    <para>
      <table>
        <title>
        <literal>ssl://</literal>和 
        <literal>tls://</literal>传输器的上下文选项（自 PHP 4.3.2 起）</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>名称</entry>
              <entry>用法</entry>
              <entry>默认值</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>verify_peer</literal>
              </entry>
              <entry>&amp;true; 或 &amp;false;。用于 SSL 证书请求验证。</entry>
              <entry>&amp;false;</entry>
            </row>
            <row>
              <entry>
                <literal>allow_self_signed</literal>
              </entry>
              <entry>&amp;true; 或 &amp;false;。允许自签名的证书。</entry>
              <entry>&amp;false;</entry>
            </row>
            <row>
              <entry>
                <literal>cafile</literal>
              </entry>
              <entry>本地文件系统中证书授权机构文件的位置，应和 
              <literal>verify_peer</literal>上下文选项一起使用来认证远端的身份。</entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>capath</literal>
              </entry>
              <entry>如果没有指定 
              <literal>cafile</literal>或者如果该处没找到证书，则在 
              <literal>capath</literal>指定的目录中搜索相配的证书。
              <literal>capath</literal>必须是一个正确的被散列化的证书目录。</entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>local_cert</literal>
              </entry>
              <entry>文件系统中本地证书文件的路径。必须是一个用 PEM 编码并包含你的证书和私人密钥的文件。可以选择包括发行者的证书链。</entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>passphrase</literal>
              </entry>
              <entry>你的 
              <literal>local_cert</literal>文件编码的 passphrase。</entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>CN_match</literal>
              </entry>
              <entry>所期待的 Common Name。PHP 能进行有限的通配符匹配。如果 Common Name 与此不匹配，连接尝试会失败。</entry>
              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <note>
      <simpara>因为 
      <literal>ssl://</literal>是 
      <link linkend="wrappers.http">
        <literal>https://</literal>
      </link>和 
      <link linkend="wrappers.ftp">
        <literal>ftps://</literal>
      </link>封装协议的底层传输器，适用于 
      <literal>ssl://</literal>的任何上下文选项也适用于 
      <literal>https://</literal>和 
      <literal>ftps://</literal>。</simpara>
    </note>
  </section>
  <section xml:id="transports.unix">
    <title>Unix 领域：Unix 和 UDG</title>
    <simpara>
    <literal>unix://</literal>自 PHP 3 起可用，
    <literal>udg://</literal>自 PHP 5 起可用。</simpara>
    <itemizedlist>
      <listitem>
        <simpara>
          <literal>unix:///tmp/mysock</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>udg:///tmp/mysock</literal>
        </simpara>
      </listitem>
    </itemizedlist>
    <simpara>
    <literal>unix://</literal>提供了在 Unix 域中对套接字流连接的访问。
    <literal>udg://</literal>提供了替代的传输器以用户数据报协议（UDP）来访问 Unix 域套接字。</simpara>
    <simpara>Unix 域套接字（UNIX Domain Socket），和 Internet Domain Socket 不同，不期望端口号。在 
    <function>fsockopen</function>中 
    <parameter>portno</parameter>参数应被设为 0。</simpara>
  </section>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
