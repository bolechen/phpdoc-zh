<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337376 Maintainer: 李大为 Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.integers">
 <title>Changes to <type>integer</type> handling</title>

 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>无效的八进制字符（Invalid octal literals）</title>

  <para>
   在之前，一个八进制字符如果含有无效数字，该无效数字将被静默删节(<literal>0128</literal> 将被解析为 <literal>012</literal>).
   现在这样的八进制字符将产生解析错误。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>负位移运算（Negative bitshifts）</title>

  <para>
   以负数形式进行的位移运算将会抛出一个
   <classname>ArithmeticError</classname>：
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
int(0)
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
    </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>超范围后产生位移</title>

  <para>
   超出 <type>integer</type> 位宽的位移操作（无论哪个方向）将始终得到 0 作为结果。在从前，这一操作是结构依赖的。
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
